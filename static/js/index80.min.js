function betslipCarouselOne() {
    var n = document.getElementsByClassName("SB-splide-betslipBanner");
    n.length > 0 && new Splide(".SB-splide-betslipBanner",{
        type: "loop",
        pagination: !0,
        arrows: !0,
        autoplay: !0
    }).mount()
}
function enableSearch() {
    var n = document.getElementsByClassName("SB-search d-none");
    n[0].classList.remove("d-none")
}
function disableSearch() {
    var n = document.querySelector("div[class='SB-homeTabs-content']");
    if (n != null) {
        var t = document.querySelector(".SB-search")
          , i = document.querySelector(".SB-searchBtnClose")
          , r = document.querySelector(".SB-serachBox")
          , u = document.getElementById("txtSearch");
        screen.width < 1024 && (t.style.display = "none");
        i.classList.remove("active");
        r.classList.remove("active");
        u.value = ""
    } else
        window.location.href = "/"
}
function searchValidation() {
    var i = document.getElementById("txtSearch")
      , n = document.querySelector(".SB-serachBox")
      , t = document.querySelector(".SB-searchBtnClose");
    n != null && n.classList[0].indexOf("active") == -1 && (n.classList.add("active"),
    t != null && t.classList.add("active"))
}
function getSearchEvent(n) {
    var i = document.getElementById("disableSearchButtonClick"), t;
    const r = "/Search/SearchTab?searchtext=" + n;
    t = new XMLHttpRequest;
    t.open("GET", r, !0);
    t.onload = function() {
        var n, r;
        if (t.status >= 200 && t.status < 400) {
            if (document.getElementsByClassName("SB-searchResult-content").length > 0 && (n = document.querySelector(".SB-homeTabs-content"),
            n != null && n.classList.add("d-none"),
            r = JSON.parse(t.responseText),
            document.getElementsByClassName("SB-searchResult-content")[0].innerHTML = r.searchData),
            betSlipData !== null && betSlipData.length > 0)
                for (let n = 0; n < betSlipData.length; n++)
                    document.getElementById("highlightBet_" + betSlipData[n].selectionId) !== null && betSlipData[n].selectionId !== "" && highlightBets("highlightBet_" + betSlipData[n].selectionId);
            eventUpdatetoLocalTimeZone();
            eventbetslipHighlight();
            searchUpdateOddsIncDec();
            i.innerHTML = '<img src="/images/other-icons/search.svg">';
            searchLocalTimeZone()
        }
    }
    ;
    t.send()
}
function eventUpdatetoLocalTimeZone() {
    var u = [getJanMonth, getFebMonth, getMarMonth, getAprMonth, getMayMonth, getJunMonth, getJulMonth, getAugMonth, getSepMonth, getOctMonth, getNovMonth, getDecMonth], t = document.getElementsByClassName("SB-kickOff"), r;
    for (let e = 0; e < t.length; e++)
        if (t[e].attributes["data-eventdatetime"] !== undefined) {
            let o = t[e].attributes["data-eventdatetime"].value;
            var f = o + " UTC"
              , n = new Date(f)
              , i = new Date;
            n.getFullYear() === i.getFullYear() && n.getMonth() === i.getMonth() && n.getDate() === i.getDate() ? (r = addZero(n.getHours()) + ":" + addZero(n.getMinutes()),
            t[e].innerHTML = getTodayLabelName + " " + r + "") : n.getFullYear() === i.getFullYear() && n.getMonth() === i.getMonth() && n.getDate() - i.getDate() == 1 ? (r = addZero(n.getHours()) + ":" + addZero(n.getMinutes()),
            t[e].innerHTML = getTomorrowLabelName + " " + r + "") : (getEXactYear = n.getFullYear(),
            getExactDate = addZero(n.getDate()),
            r = addZero(n.getHours()) + ":" + addZero(n.getMinutes()),
            t[e].innerHTML = "" + getExactDate + " " + u[n.getMonth()] + " " + r + "")
        }
}

//place bet here
function eventbetslipHighlight() {
    betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    betSlipData === null ? (betSlipData = [],
    localStorage.setItem("betSlipData", JSON.stringify(betSlipData))) : betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    var n = document.getElementById("getBetsCountDisplay");
    if (n != null && (n.innerHTML = betSlipData.length),
    betSlipData.length > 0)
        for (let n = 0; n < betSlipData.length; n++)
            document.getElementById("highlightBet_" + betSlipData[n].selectionId) !== null
}
function searchUpdateOddsIncDec() {
    var n = document.getElementsByClassName("btn SB-btnOdds"), t;
    if (n.length > 0)
        for (let i = 0; i < n.length; i++)
            n[i].attributes["searchodds-incdec"] !== undefined && n[i].className === "btn SB-btnOdds " && (t = n[i].attributes["searchodds-incdec"].value,
            t === "I" ? n[i].classList.add("SB-btnOddsIncreased") : t === "D" ? n[i].classList.add("SB-btnOddsDecreased") : (n[i].classList.remove("SB-btnOddsIncreased"),
            n[i].classList.remove("SB-btnOddsDecreased")),
            setTimeout(function() {
                n[i] !== undefined && (n[i].classList.remove("SB-btnOddsIncreased"),
                n[i].classList.remove("SB-btnOddsDecreased"))
            }, 5e3))
}
function gotoPage() {
    storeData = "cookieStorage";
    createCookie("MyStorageData", storeData, cookieExpiryTime);
    readCookie("MyStorageData");
    localStorage.setItem("key", storeData);
    localStorage.getItem("key")
}
function createCookie(n, t, i) {
    var u, r;
    i ? (r = new Date,
    r.setTime(r.getTime() + i * cookieExpiryHours * cookieExpiryMinutes * 6e4),
    u = "; expires=" + r.toGMTString()) : u = "";
    document.cookie = n + "=" + t + u + "; path=/"
}
function readCookie(n) {
    for (var t, r = n + "=", u = document.cookie.split(";"), i = 0; i < u.length; i++) {
        for (t = u[i]; t.charAt(0) === " "; )
            t = t.substring(1, t.length);
        if (t.indexOf(r) === 0)
            return t.substring(r.length, t.length)
    }
    return null
}
function eraseCookie(n) {
    createCookie(n, "", -1)
}
function createAppDomainCookie(n, t, i) {
    var u, r;
    i ? (r = new Date,
    r.setTime(r.getTime() + i * cookieExpiryHours * cookieExpiryMinutes * 6e4),
    u = "; expires=" + r.toGMTString()) : u = "";
    document.cookie = n + "=" + t + u + ";domain=" + globalConfig.CookieDomain + "; path=/"
}
function getCookie(n) {
    var i = document.cookie, u = n + "=", t = i.indexOf("; " + u), r;
    if (t === -1) {
        if (t = i.indexOf(u),
        t !== 0)
            return null
    } else
        t += 2,
        r = document.cookie.indexOf(";", t),
        r === -1 && (r = i.length);
    return decodeURI(i.substring(t + u.length, r))
}
function isAlphaNumerics(n) {
    var t = n.which ? n.which : n.keyCode;
    return t > 47 && t < 58 || t > 64 && t < 91 || t > 96 && t < 123 || t == 0
}
function enterUserName(n) {
    n = n ? n : window.event;
    const t = n.which ? n.which : n.keyCode;
    return t > 31 && t !== 46 && (t < 48 || t > 57) ? !1 : !0
}
function betBuilderStakeCalculation() {
    var n, t, i, r, u;
    isShowPayoutMessage = !1;
    var e = 0
      , f = document.querySelectorAll("[id^=stakeValue_]")
      , o = document.querySelectorAll("[id^=totalWin_]")
      , s = document.querySelectorAll("[id^=BBtotalOddsMarket_]");
    getWinningAmount = 0;
    getExciseValue = 0;
    getActualValue = 0;

    getWhtValue = 0;
    for (let n = 0; n < f.length; n++)
        f[n].value > 0 && (e += Number(f[n].value)),
        excisevalue = 0,
        getbbActualValue = 0,
        bbwhtvalue = 0,
        excisevalue = Number(f[n].value) * (ConfigStakeTaxValue / 100) / (ConfigExiceTaxPercantage / 100),
        getbbActualValue = Number(f[n].value),
        bbwhtvalue = (getbbActualValue * Number(s[n].innerHTML)) * (WHTValue / 100),
        o[n].innerHTML = (getbbActualValue * Number(s[n].innerHTML)).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
        getWinningAmount += Number(o[n].innerHTML.replace(",", "")),
        getExciseValue += Number(excisevalue),
        getWhtValue += Number(bbwhtvalue),
        getActualValue += Number(getbbActualValue);
    e !== "" ? (getReturns = getActualValue * getBetSlipOdds,
    Number(getReturns) > Number(placebetMaxReturnsValue) && (isShowPayoutMessage = !0),
    n = document.getElementById("bindWhtValue"),
    n !== null && (n.innerHTML = CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    t = document.getElementById("bindWinningValue"),
    t !== null && (t.innerHTML = CurrencyCode + " " + getWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    i = document.getElementById("bindExciseValue"),
    i !== null && (i.innerHTML = CurrencyCode + " " + Number(getExciseValue).toFixed(2)),
    r = document.getElementById("bindDeductedStakeValue"),
    r !== null && (r.innerHTML = CurrencyCode + " " + Number(e).toFixed(2)),
    u = document.getElementById("bindActualStakeValue"),
    u !== null && (u.innerHTML = CurrencyCode + " " + Number(getActualValue).toFixed(2))) : (getReturns = 0,
    getWhtValue = 0,
    getWinningAmount = 0,
    getOriginalStakeValue = 0,
    getExciseValue = 0,
    totalBonusValue = 0,
    bonusAmountValue = 0,
    n = document.getElementById("bindWhtValue"),
    n !== null && (n.innerHTML = CurrencyCode + " 0"),
    t = document.getElementById("bindWinningValue"),
    t !== null && (t.innerHTML = CurrencyCode + " 0"),
    i = document.getElementById("bindExciseValue"),
    r = document.getElementById("bindDeductedStakeValue"),
    i !== null && (i.innerHTML = CurrencyCode + " 0"),
    r !== null && (r.innerHTML = CurrencyCode + " 0"),
    u = document.getElementById("bindActualStakeValue"),
    u !== null && (u.innerHTML = CurrencyCode + " 0"));
    createCookie("userStakeValue", e, 1)
}
function numberValidationMobile() {
    var e = 0, n, t, r, u, i, f;
    document.getElementById("BonusValue") !== null && (e = document.getElementById("BonusValue").innerText);
    bonusAmount = parseFloat(e);
    isShowPayoutMessage = !1;
    document.getElementById("stakeValue") !== null && document.getElementById("stakeValue") !== undefined && (getOriginalStakeValue = document.getElementById("stakeValue").value);
    getOriginalStakeValue !== "" ? (getReturns = getOriginalStakeValue * getBetSlipOdds,
    getStakeValue = getOriginalStakeValue,
    bonusAmount > 0 && document.getElementById("bonusBalance").checked ? (getExciseValue = 0,
    getActualValue = getOriginalStakeValue) : (getExciseValue = getStakeValue * (ConfigStakeTaxValue / 100) / (ConfigExiceTaxPercantage / 100),
    getActualValue = getStakeValue),
    getWhtValue = (getActualValue * getBetSlipOdds) * (WHTValue / 100),
    getWinningAmount = getOriginalStakeValue * getBetSlipOdds,
    getBonusReturns(),
    n = document.getElementById("bindExciseValue"),
    n !== null && (n.innerHTML = CurrencyCode + " " + Number(getExciseValue).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    t = document.getElementById("bindDeductedStakeValue"),
    t !== null && (t.innerHTML = CurrencyCode + " " + Number(getStakeValue).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    i = document.getElementById("bindActualStakeValue"),
    i !== null && (i.innerHTML = CurrencyCode + " " + Number(getActualValue).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    r = document.getElementById("bindWhtValue"),
    r !== null && (r.innerHTML = CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    u = document.getElementById("bindWinningValue"),
    u !== null && (u.innerHTML = CurrencyCode + " " + getWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    Number(getReturns) > Number(placebetMaxReturnsValue) ? (isShowPayoutMessage = !0,
    getPlaceBetErrorMessageId = document.getElementById("placeBetErrorMessageDisplay"),
    getPlaceBetErrorMessageId.scrollIntoView(),
    getPlaceBetErrorMessageId.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetMaxAmountExceedMsg") + placebetMaxAmount + "<\/span><\/div><\/div>") : (isShowPayoutMessage = !1,
    getPlaceBetErrorMessageId = document.getElementById("placeBetErrorMessageDisplay"),
    getPlaceBetErrorMessageId !== null && getPlaceBetErrorMessageId !== undefined && (getPlaceBetErrorMessageId.innerHTML = ""))) : (getOriginalStakeValue = 0,
    getReturns = 0,
    getWhtValue = 0,
    getWinningAmount = 0,
    getOriginalStakeValue = 0,
    getExciseValue = 0,
    totalBonusValue = 0,
    bonusAmountValue = 0,
    r = document.getElementById("bindWhtValue"),
    r !== null && (r.innerHTML = CurrencyCode + " 0"),

    u = document.getElementById("bindWinningValue"),
    u !== null && (u.innerHTML = CurrencyCode + " 0"),
    n = document.getElementById("bindExciseValue"),
    n !== null && (n.innerHTML = CurrencyCode + " 0"),
    t = document.getElementById("bindDeductedStakeValue"),
    t !== null && (t.innerHTML = CurrencyCode + " 0"),
    getBonusAmountId = document.getElementById("bindBonusValue"),
    getBonusAmountId != null && (getBonusAmountId.innerHTML = CurrencyCode + " 0"),
    i = document.getElementById("bindActualStakeValue"),
    i !== null && (i.innerHTML = CurrencyCode + " 0"),
    f = document.getElementById("stakeValue"),
    f !== null && (f.innerHTML = CurrencyCode + " 0"));
    createCookie("userStakeValue", getOriginalStakeValue, 1)
}
function initializeCarousel() {
    setTimeout(()=>{
        new Siema({
            selector: ".SB-topEvents-carousel",
            duration: 200,
            easing: "ease-out",
            perPage: 1,
            startIndex: 0,
            draggable: !0,
            multipleDrag: !0,
            threshold: 20,
            loop: !1,
            rtl: !1,
            onInit: ()=>{}
            ,
            onChange: ()=>{}
        })
    }
    , 100)
}
function addBetsToBetSlip(n, t) {
    var r, l, v, y, c, h, s, p, w, u, e, o, f;
    createCookie("userStakeValue", "", -1);
    r = {};
    l = !1;
    l = n.selectionId !== null && n.selectionId !== "" ? !1 : !0;
    let b = n.eventDate.replace(/_/g, " ")
      , k = b + " UTC";
    if (v = new Date(k),
    y = new Date,
    v.getTime() < y.getTime() && n.isLive.toLowerCase() !== "true") {
        if (JSON.parse(localStorage.getItem("betSlipData")) !== "") {
            if (u = document.getElementsByClassName("SB-maxBetsAdded-errorInfo"),
            u != null)
                for (i = 0; i < u.length; i++)
                    e = u[i].lastChild,
                    e != null ? (e.textContent = GetLocalizedPlacebetMessages("oldEventonBetslipErrorMsg"),
                    u[i].classList.remove("d-none"),
                    o = document.querySelector('div[class="SB-quickBetslip-footer d-none"]'),
                    o != null && o.classList.remove("d-none"),
                    f = document.getElementById("maxbetserrormsg"),
                    f !== null && f !== undefined && f.scrollIntoView()) : u[i].classList.add("d-none")
        } else if (u = document.getElementsByClassName("SB-maxBetsAdded-errorInfo"),
        u != null)
            for (i = 0; i < u.length; i++)
                e = u[i].lastChild,
                e != null ? (e.textContent = GetLocalizedPlacebetMessages("oldEventonBetslipErrorMsg"),
                u[i].classList.remove("d-none"),
                o = document.querySelector('div[class="SB-quickBetslip-footer d-none"]'),
                o != null && o.classList.remove("d-none"),
                f = document.getElementById("maxbetserrormsg"),
                f !== null && f !== undefined && f.scrollIntoView()) : u[i].classList.add("d-none")
    } else {
        if (n.homeTeam !== undefined && n.awayTeam !== undefined && (r = {
            isLive: n.isLive,
            matchName: n.awayTeam !== "" ? n.homeTeam.replace(/_/g, " ") + " vs " + n.awayTeam.replace(/_/g, " ") : n.homeTeam.replace(/_/g, " "),
            marketId: n.marketId,
            marketName: n.marketName.replace(/_/g, " "),
            selectionId: n.selectionId,
            odds: n.odds,
            outcome: n.outcomeName.replace(/_/g, " "),
            eventId: n.eventId,
            priceId: n.priceId,
            kickOffTime: n.eventDate.replace(/_/g, " "),
            isBetBuilder: l
        }),
        c = [],
        h = !1,
        JSON.parse(localStorage.getItem("betSlipData")) !== "")

            // get the values here. bet bonus
            if (betSlipData = JSON.parse(localStorage.getItem("betSlipData")),
            c = JSON.parse(localStorage.getItem("betSlipData")),
            c !== null && c.length > 0) {
                if (s = [],
                betSlipData.length > 0)
                    for (let t = 0; t < betSlipData.length; t++) {
                        let i = betSlipData[t].kickOffTime
                          , r = i + " UTC";
                        p = new Date(r);
                        w = new Date;
                        p.getTime() < w.getTime() && n.isLive.toLowerCase() !== "true" && (removeHighlightBets("highlightBet_" + betSlipData[t].selectionId),
                        s.push(t));
                        isBetBuilder = betSlipData[t].selectionId !== "" ? !1 : !0
                    }
                if (s !== null && s.length > 0) {
                    for (let n = 0; n < s.length; n++)
                        betSlipData.splice(s[n], 1);
                    localStorage.setItem("betSlipData", JSON.stringify(betSlipData))
                }
            } else
                isBetBuilder = !1,
                h = !0;
        if (r.selectionId !== null && r.selectionId !== "" && (!isBetBuilder || h)) {
            let n = !1
              , i = !1
              , u = 0
              , f = 0;
            if (betSlipData !== null && betSlipData.length > 0)
                for (let t = 0; t < betSlipData.length; t++)
                    Number(betSlipData[t].selectionId) === Number(r.selectionId) && r.selectionId !== "" ? (n = !0,
                    u = t) : Number(betSlipData[t].eventId) === Number(r.eventId) && r.selectionId !== "" && (i = !0,
                    f = t,
                    document.getElementById("highlightBet_" + betSlipData[t].selectionId) !== null && removeHighlightBets("highlightBet_" + betSlipData[t].selectionId));
            if (this.betSlipData.length < maxBetsCount)
                if (n) {
                    betSlipData.splice(u, 1);
                    let n = document.getElementById("highlightBet_" + t);
                    removeHighlightBets("highlightBet_" + t)
                } else if (i) {
                    betSlipData.splice(f, 1);
                    betSlipData.push(r);
                    let n = document.getElementById("highlightBet_" + t);
                    t !== "" && highlightBets("highlightBet_" + t)
                } else {
                    betSlipData.push(r);
                    let n = document.getElementById("highlightBet_" + t);
                    t !== "" && highlightBets("highlightBet_" + t)
                }
            else if (n) {
                betSlipData.splice(u, 1);
                let n = document.getElementById("highlightBet_" + t);
                removeHighlightBets("highlightBet_" + t)
            } else if (i) {
                betSlipData.splice(f, 1);
                betSlipData.push(r);
                let n = document.getElementById("highlightBet_" + t);
                t !== "" && highlightBets("highlightBet_" + t)
            }
            addbets(betSlipData)
        } else if ((r.selectionId === null || r.selectionId === "" || !isBetBuilder || h) && (r.selectionId !== null && r.selectionId !== "" || isBetBuilder || h)) {
            if (isBetBuilder) {
                var d = Number(placebetDefaultStakeValue) * (ConfigStakeTaxValue / 100) / (ConfigExiceTaxPercantage / 100)
                  , a = Number(placebetDefaultStakeValue) - d
                  , g = (a * Number(r.odds) - a) * (WHTValue / 100)
                  , nt = (a * Number(r.odds) - g).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                r.stakeValue = nt
            }
            betSlipData.push(r);
            addbets(betSlipData)
        } else if (u = document.getElementsByClassName("SB-maxBetsAdded-errorInfo"),
        u != null)
            for (i = 0; i < u.length; i++)
                e = u[i].lastChild,
                e != null ? (e.textContent = GetLocalizedPlacebetMessages("betBuilderCombinationErrorMsg"),
                u[i].classList.remove("d-none"),
                o = document.querySelector('div[class="SB-quickBetslip-footer d-none"]'),
                o != null && o.classList.remove("d-none"),
                f = document.getElementById("maxbetserrormsg"),
                f !== null && f !== undefined && f.scrollIntoView()) : u[i].classList.add("d-none")
    }
    addEventToHub(JSON.stringify({
        eventType: "betSlipFixture",
        eventId: n.eventId,
        sportId: n.sportid
    }))
}
function addbets(n) {
    var f, r, t, e, o, u;
    if (localStorage.setItem("betSlipData", JSON.stringify(n)),
    updateBetslip(),
    sessionState.setBetSlipList(n),
    f = document.getElementById("getBetsCountDisplay"),
    f != null && (f.innerHTML = n.length),
    r = document.getElementById("BLM-betSlip-Button"),
    n.length === 0 && r !== null ? r.classList.remove("SB-betSlip-active") : r !== null && r.classList.add("SB-betSlip-active"),
    t = document.getElementsByClassName("SB-maxBetsAdded-errorInfo"),
    t != null)
        for (i = 0; i < t.length; i++)
            n.length == maxBetsCount ? (e = t[i].lastChild,
            e != null && (e.textContent = GetLocalizedPlacebetMessages("maxbetAddedMessage")),
            t[i].classList.remove("d-none"),
            o = document.querySelector('div[class="SB-quickBetslip-footer d-none"]'),
            o != null && o.classList.remove("d-none"),
            u = document.getElementById("maxbetserrormsg"),
            u !== null && u !== undefined && u.scrollIntoView()) : t[i].classList.add("d-none")
}
function getUrlVars() {
    var n = {}
      , t = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(t, i, r) {
        n[i] = r
    });
    return n
}
function getUserBetsCount() {
    var t = readCookie("token")
      , i = readCookie("userNumber")
      , n = new XMLHttpRequest
      , r = globalMyBetsUrl
      , u = {
        trk: trk,
        settled: !1,
        limit: limit,
        offset: offset,
        countrycode: Countrycode,
        twToken: t,
        logMob: Number(i)
    };
    n.open("POST", r, !0);
    n.setRequestHeader("Content-type", "application/json");
    n.onreadystatechange = function() {
        var i, r, t;
        n.readyState === 4 && n.status === 200 && (i = JSON.parse(n.responseText),
        i.hasOwnProperty("error") === !1 ? (r = i.pageInfo,
        t = document.getElementById("getUserBetsCountDisplay"),
        t !== null && (t.innerHTML = r.total,
        t.classList.remove("d-none"))) : (t = document.getElementById("getUserBetsCountDisplay"),
        t.innerHTML = 0))
    }
    ;
    n.send(JSON.stringify(u))
}
function getUserBalance(n) {
    var i = n == "success" ? !0 : !1;
    let r = readCookie("token");
    var u = readCookie("user")
      , t = new XMLHttpRequest
      , f = globalBalanceUrl
      , e = {
        trk: trk,
        twToken: r,
        countrycode: Countrycode,
        logMob: Number(u)
    };
    t.open("POST", f, !0);
    t.setRequestHeader("Content-type", "application/json");
    t.onreadystatechange = function() {
        var f, e, o, s, h, u, w, b, c, l, r, k;
        if (t.readyState === 4 && t.status === 200) {
            let d = JSON.parse(t.responseText);
            if (d.hasOwnProperty("error"))
                createCookie("token", "", -1),
                createCookie("balance", "", -1),
                createCookie("betsCount", "", -1),
                createCookie("walletId", "", -1),
                createCookie("defWalletId", "", -1),
                createCookie("userNumber", "", -1),
                createCookie("customerId", "", -1),
                createCookie("depositPopUp", "", -1),
                createCookie("jackpotPopUp", "", -1),
                createCookie("picksixPopUp", "", -1),
                createCookie("registration", "", -1),
                createCookie("freebet", "", -1),
                createCookie("email", "", -1),
                createCookie("PhoneNumber", "", -1),
                createCookie("userStakeValue", "", -1),
                createCookie("acceptcheck", "", -1),
                createCookie("hasDeposited", "", -1),
                createCookie("user", "", -1),
                createCookie("keepbetscheck", "", -1),
                createAppDomainCookie("user", "", -1),
                createAppDomainCookie("AppSession", "", -1),
                createAppDomainCookie_Pick6("AppSession", "", -1),
                createAppDomainCookie_Pick6("userId", "", -1),
                createAppDomainCookie_Pick6("userNumber", "", -1),
                createAppDomainCookie_Pick6("CurrencyCode", "", -1),
                createAppDomainCookie_Pick6("UserCulture", "", -1),
                createAppDomainCookie_Games("AppSession", "", -1),
                createAppDomainCookie_Games("userId", "", -1),
                createAppDomainCookie_Games("userNumber", "", -1),
                createAppDomainCookie_Games("CurrencyCode", "", -1),
                createAppDomainCookie_Games("UserCulture", "", -1),
                window.location.href = "/";
            else {
                createCookie("user", d.userName, cookieExpiryTime);
                createCookie("balance", d.balance, cookieExpiryTime);
                createCookie("userNumber", d.userName.slice(3), cookieExpiryTime);
                createCookie("customerId", d.customerId, cookieExpiryTime);
                createCookie("email", d.email, cookieExpiryTime);
                createCookie("hasDeposited", d.hasDeposited, cookieExpiryTime);
                freeBetDetails = d.wallet;
                freeBetDetails !== undefined && freeBetDetails !== null && freeBetDetails.length === 0 && (createCookie("freebet", "", -1),
                createCookie("defWalletId", "", -1),
                createCookie("walletId", "", -1));
                bonusAmount = d.sportBonusBalance;
                getBetSlip(betSlipData, !1, i);
                var a = document.getElementById("displayUserMobileNo")
                  , v = document.getElementById("displayUserAccountBalance")
                  , y = document.getElementById("displayUserCashAmount")
                  , p = document.getElementById("displayMyAccountUserWithdrawAmount");
                if (a !== undefined && a !== null && (a.innerHTML = "+" + Countryid + " " + readCookie("user").slice(3)),
                v !== undefined && v !== null && (v.innerHTML = CurrencyCode + " " + d.balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
                y !== undefined && y !== null && (y.innerHTML = CurrencyCode + " " + d.balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
                p !== undefined && p !== null && (p.innerHTML = CurrencyCode + " " + d.balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
                f = document.getElementById("displayUserWithdrawAmount"),
                f !== undefined && f !== null && (f.innerHTML = CurrencyCode + " " + d.balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
                e = document.getElementById("headerUserBalanceDisplay"),
                e !== undefined && e !== null && (e.innerHTML = CurrencyCode + " " + d.balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
                o = document.getElementById("headerUserBalanceMobileDisplay"),
                o !== undefined && o !== null && (o.innerHTML = CurrencyCode + " " + d.balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
                s = document.getElementById("modalSectionUserBalanceDisplay"),
                s !== undefined && s !== null && (s.innerHTML = CurrencyCode + " " + d.balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
                h = document.getElementById("userMobileNumber"),
                h !== undefined && h !== null && (h.innerHTML = "+" + Countryid + " " + readCookie("user").slice(3)),
                u = document.querySelectorAll("div[id='displayUserFreeBetsAmount']"),
                u !== undefined && u !== null && freeBetDetails.length > 0) {
                    for (w = 0,
                    r = 0; r < freeBetDetails.length; r++)
                        w += freeBetDetails[r].credit;
                    for (r = 0; r < u.length; r++)
                        b = '<div class="SB-contentBlock"><div class="SB-leftContent">Free Bet<\/div><div class="SB-rightContent">' + CurrencyCode + " " + w + "<\/div><\/div>",
                        u[r].innerHTML = b
                }
                if (c = document.querySelectorAll("div[id='displayUserBonusAmount']"),
                l = document.getElementById("bonusAmount"),
                c !== null)
                    if (bonusAmount > 0 && l == null)
                        for (r = 0; r < c.length; r++)
                            k = CreateContentElement(),
                            c[r].appendChild(k);
                    else
                        bonusAmount > 0 && l != null && (l.textContent = CurrencyCode + " " + bonusAmount)
            }
            n === "success" && getBetReceipt()
        } else
            t.status !== 200 && (createCookie("token", "", -1),
            createCookie("balance", "", -1),
            createCookie("betsCount", "", -1),
            createCookie("walletId", "", -1),
            createCookie("defWalletId", "", -1),
            createCookie("userNumber", "", -1),
            createCookie("customerId", "", -1),
            createCookie("depositPopUp", "", -1),
            createCookie("jackpotPopUp", "", -1),
            createCookie("picksixPopUp", "", -1),
            createCookie("registration", "", -1),
            createCookie("freebet", "", -1),
            createCookie("email", "", -1),
            createCookie("PhoneNumber", "", -1),
            createCookie("userStakeValue", "", -1),
            createCookie("acceptcheck", "", -1),
            createCookie("hasDeposited", "", -1),
            createCookie("user", "", -1),
            createCookie("keepbetscheck", "", -1),
            createAppDomainCookie("user", "", -1),
            createAppDomainCookie("AppSession", "", -1),
            createAppDomainCookie_Pick6("AppSession", "", -1),
            createAppDomainCookie_Pick6("userId", "", -1),
            createAppDomainCookie_Pick6("userNumber", "", -1),
            createAppDomainCookie_Pick6("CurrencyCode", "", -1),
            createAppDomainCookie_Pick6("UserCulture", "", -1),
            createAppDomainCookie_Games("AppSession", "", -1),
            createAppDomainCookie_Games("userId", "", -1),
            createAppDomainCookie_Games("userNumber", "", -1),
            createAppDomainCookie_Games("CurrencyCode", "", -1),
            createAppDomainCookie_Games("UserCulture", "", -1),
            window.location.href = "/");
        hideFreeBets(freeBetDetails)
    }
    ;
    t.send(JSON.stringify(e))
}
function CreateContentElement() {
    var i = document.createElement("div"), r, n, u, t;
    return i.className = "SB-leftContent",
    r = document.createElement("B"),
    r.textContent = "Bonus",
    i.appendChild(r),
    n = document.createElement("div"),
    n.id = "bonusAmount",
    n.className = "SB-rightContent",
    u = document.createElement("B"),
    u.textContent = CurrencyCode + " " + bonusAmount,
    n.appendChild(u),
    t = document.createElement("div"),
    t.className = "SB-contentBlock  SB-userBonusBlock",
    t.appendChild(i),
    t.appendChild(n),
    t
}
function hideFreeBets(n) {
    var i, t;
    if (document.getElementById("freeBetuser") !== null && (document.getElementById("freeBetuser").style.display = n.length === 0 ? "none" : "block"),
    i = document.getElementById("freebetOptions"),
    i !== null)
        if (t = "",
        n.length > 0) {
            t += '<div class="SB-select SB-freeBetSelect"><select><option >' + txtfreebetHtml + "<\/option>";
            for (let i = 0; i < n.length; i++)
                t += "<option >" + CurrencyCode + " " + n[i].credit + "<\/option>";
            t += "<\/select><\/div>";
            i.innerHTML = t
        } else
            i.innerHTML = ""
}
function acceptChanges() {
    var u, f, t, e, n, i, r;
    isShowPayoutMessage = !1;
    betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    for (let n of betSlipData)
        for (let t of oddsChangedArray[0])
            Number(n.selectionId) === Number(t.selid) && (n.odds = t.odds.toString());
    if (this.oddsChangedArray = [],
    u = document.getElementById("displayPlaceBetButton"),
    f = document.getElementById("displayAcceptOddsButton")
    ,
    u.innerHTML = '<button class="btn SB-btnPrimary active SB-btnLarge SBbtn SB-btnPlaceBet" onclick="placeBetApiCall()"><span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span><\/button>",
    f.innerHTML = "",
    localStorage.setItem("betSlipData", JSON.stringify(betSlipData)),
    betSlipData = JSON.parse(localStorage.getItem("betSlipData")),
    betSlipData.length > 0) {
        getBetSlipOdds = 1;
        for (let n = 0; n < betSlipData.length; n++)
            getBetSlipOdds = getBetSlipOdds * betSlipData[n].odds;
        getBetSlipOdds = getBetSlipOdds.toFixed(2)
    }
    getReturns = getStake * getBetSlipOdds;
    Number(getReturns) > Number(placebetMaxReturnsValue) ? (getReturns = placebetMaxReturnsValue,
    getStake = getReturns / getBetSlipOdds,
    isShowPayoutMessage = !0) : IsWHTExists ? (getWhtValue = (getReturns - getOriginalStakeValue) * (WHTValue / 100),
    getWinningAmount = getReturns) : getWinningAmount = getReturns;
    t = document.getElementById("bindWhtValue");
    t !== null && (t.innerHTML = CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
    e = document.getElementById("bindWinningValue");
    e.innerHTML = CurrencyCode + " " + getWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    getBetSlip(betSlipData);
    n = readCookie("freebet");
    (n === !0 || n === "true") && (createCookie("walletId", "", -1),
    freeBetClicked(n));
    isShowPayoutMessage = !1;
    i = document.getElementById("bindExciseValue");
    r = document.getElementById("bindDeductedStakeValue");
    i !== null && (i.innerHTML = CurrencyCode + " " + Number(getExciseValue).toFixed(2));
    r !== null && (r.innerHTML = CurrencyCode + " " + Number(getStakeValue).toFixed(2))
}
function hideOpenedBetSlip() {
    var r = readCookie("token"), t, i, n;
    hideBetSlip = !0;
    document.body.classList.remove("SB-rightMenu-opened");
    betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    getWhtValue = 0;
    getExciseValue = 0;
    t = document.querySelectorAll(".footerItemsDisplayListWithLogin li");
    fnactiveCSS(t, -1);
    i = document.querySelectorAll(".footerItemsDisplayListWithOutLogin li");
    fnactiveCSS(i, -1);
    getBetSlip(betSlipData);
    addBetSlipAccordian();
    r !== null && (createCookie("freebet", !1, cookieExpiryTime),
    createCookie("walletId", "", -1),
    createCookie("defWalletId", "", -1));
    n = document.getElementById("BLM-betSlip-Button");
    betSlipData !== null && betSlipData.length > 0 ? n !== null && n.classList.add("SB-betSlip-active") : n !== null && n.classList.remove("SB-betSlip-active");
    isShowPayoutMessage = !1
}
function openHiddenBetSlip(n=false) {
    var r = readCookie("token"), t, i;
    hideBetSlip = !1;
    betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    betSlipData.length === 0 && createCookie("userStakeValue", "", -1);
    t = document.getElementById("getBetsCountDisplay");
    t != null && (t.innerHTML = betSlipData.length);
    document.body.classList.add("SB-rightMenu-opened");
    getBetSlip(betSlipData, n);
    readCookie("userStakeValue") !== null && readCookie("userStakeValue") !== "" && betSlipData.length > 0 && (i = readCookie("userStakeValue"),
    document.getElementById("stakeValue") !== null && (document.getElementById("stakeValue").value = i));
    isBetBuilder === !0 ? betBuilderStakeCalculation() : numberValidationMobile();
    r !== null && (createCookie("freebet", !1, cookieExpiryTime),
    createCookie("walletId", "", -1),
    createCookie("defWalletId", "", -1));
    isShowPayoutMessage = !1
}
function acceptOddsCheckBoxClick() {
    var t = readCookie("acceptcheck"), n;
    t === !0 || t === "true" ? createCookie("acceptcheck", !1, cookieExpiryTime) : createCookie("acceptcheck", !0, cookieExpiryTime);
    betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    getBetSlip(betSlipData);
    n = readCookie("freebet");
    (n === !0 || n === "true") && (createCookie("walletId", "", -1),
    freeBetClicked(n));
    isShowPayoutMessage = !1
}
function keepPlacedBetsCheckBoxClick() {
    var n = readCookie("keepbetscheck");
    n === !0 || n === "true" ? createCookie("keepbetscheck", !1, cookieExpiryTime) : createCookie("keepbetscheck", !0, cookieExpiryTime)
}
function onBookaBetclick() {
    var r = JSON.parse(localStorage.getItem("betSlipData")), i = document.getElementsByClassName("SB-mainHeader-item"), t, n;
    if (i !== null)
        for (n = 0; n < i.length; n++)
            i[n].href.toString().toLowerCase().indexOf("onbookabetclick") < 0 ? i[n].parentElement.classList.remove("active") : i[n].parentElement.classList.add("active");
    if (t = document.getElementsByClassName("SB-subHeader-item"),
    t !== null)
        for (n = 0; n < t.length; n++)
            t[n].href.toString().toLowerCase().indexOf("onbookabetclick") < 0 ? t[n].parentElement.classList.remove("active") : t[n].parentElement.classList.add("active");
    getBetSlip(r, !0);
    BindBookaBetMobileView()
}
function BindBookaBetMobileView() {
    var n = document.getElementsByClassName("SB-rightSection")[0].clientHeight;
    n == 0 && openHiddenBetSlip(!0)
}
function getBetSlip(n, t=false, i=false) {
    var y, b, g, k, d, nt, tt, o, it, s, rt, ut, p, h, c, l, e;
    let r = readCookie("token");
    y = readCookie("balance");
    y !== null && (y = y.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
    var a = document.getElementById("betslipDisplay")
      , w = ""
      , u = ""
      , f = "";
    if (bonusBetCount = 1,
    validBetcount = 0,
    invalidBetcount = 0,
    b = document.querySelectorAll("#maxbetserrormsg div"),
    g = "",
    b.length > 0 && (g = b[1].innerHTML),
    n !== undefined && n.length > 0) {
        getBetSlipOdds = 1;
        for (let t = 0; t < n.length; t++)
            getBetSlipOdds = getBetSlipOdds * n[t].odds;
        getBetSlipOdds = getBetSlipOdds.toFixed(2)
    }
    if (n !== undefined && n.length > 0) {
        if (w = '<div class="SB-rightMenu-main-content" ><div class="SB-betSlip-container"><div class="SB-betSlip-header"><div class="SB-betslipMyBets-tabs"><ul><li class="active" id="betslip" onclick="betslipMybetsTabClick(event)">Betslip <span class="SB-betsCount active">' + n.length + "<\/span><\/li>" + (r != null && r != "" ? '<li id="mybets" onclick="betslipMybetsTabClick(event)">My Bets <span class="SB-betsCount d-none"><\/span><\/li>' : '<li id="mybets"><\/li>') + '<\/ul><\/div><div class="SB-betSlip-closeButton" id="BLM-betSlip-closeButton" onclick="hideOpenedBetSlip()"><img src="/static/images/betslip-close.svg" /><\/div><\/div><div class="SB-betSlip-content">',
        n.length > 0 && n[0].selectionId === "" && (isBetBuilder = !0),
        isBetBuilder && n.length > 0)
            for (let t = 0; t < n.length; t++) {
                validateBonusOdds(n, t);
                u += '<div class="SB-betBuilder-betSlipBox"><div class="SB-betBuilder-betSlipBox-header"><div class="SB-betBuilder-betSlipBox-header-left"><div>Betbuilder<\/div><div class="SB-fixture">' + n[t].matchName + '<\/div > <\/div><div class="SB-betBuilder-betSlipBox-header-right"><div class="SB-totalOdds" id="BBtotalOddsMarket_' + t + '">' + Number(n[t].odds).toFixed(2) + '<\/div><\/div><\/div><div class="SB-betBuilder-betSlipBox-content"><div class="SB-bet-details-container">';
                k = n[t].marketName.split("&");
                for (let n = 0; n < k.length; n++)
                    d = k[n].split(":"),
                    u += '<div class="SB-bet-details"><div class="SB-outcome">' + d[1] + '<\/div><div class="SB-market">' + d[0] + "<\/div><\/div>";
                u += '<\/div><div class="SB-betRemove" data-selectionId="' + n[t].selectionId + '" onclick="removeBet(' + t + ')"><img src="/static/images/bet-remove.svg" data-selectionId="' + n[t].selectionId + '"/><\/div><\/div><div class="SB-betBuilder-betSlipBox-footer"><div class="SB-betBuilder-stakeReturns-container"><div class="SB-betBuilder-stakeReturns-left"><div>To Win:<\/div><div class="SB-totalWin">' + CurrencyCode + ' <span id="totalWin_' + t + '">' + (n[t].odds * placebetDefaultStakeValue).toFixed(2) + '<\/span ><\/div><\/div><div class="SB-betBuilder-stakeReturns-right"><div class="SB-stakeInputBox SB-form-control"><span>' + CurrencyCode + '<\/span><input type="number" placeholder="Stake" value="' + placebetDefaultStakeValue + '" id="stakeValue_' + t + '" onkeyup="return betBuilderStakeCalculation()" onkeypress="return enterUserName(event)"/><\/div><\/div><\/div><\/div>'
            }
        else if (u = "",
        u += '<div class="SB-betSlipBox-group">',
        n.length > 0)
            for (let t = 0; t < n.length; t++)
                validateBonusOdds(n, t),
                u += '<div class="SB-betSlipBox" id="highlightCompletedMatchBet_' + t + '" data-selIdBox="betSlipBoxContentSeId_' + n[t].selectionId + '"><div class="SB-betSlipBox-content"><div class="SB-bet-details"><div class="SB-betDeatils-header"><div class="SB-betSlip-fixture">' + n[t].matchName + '   <\/div><div class="SB-betSlipBox-close" data-selectionId="' + n[t].selectionId + '" onclick="removeBet(event)"><img src="/static/images/bet-remove.svg" data-selectionId="' + n[t].selectionId + '"/><\/div><\/div><div class="SB-betSlip-market">' + n[t].marketName + '<\/div><div class="SB-betSlip-outcomeOdds"><span class="SB-betSlip-outcome">' + n[t].outcome + '<\/span><span class="SB-betSlip-odds" id="highlightOdds_' + n[t].selectionId + '"><span id="oddsSelectionId_' + n[t].selectionId + '">' + Number(n[t].odds).toFixed(2) + "<\/span><\/span><\/div><\/div>",
                u += '<div class="SB-bet-errorMsg d-none" id="individualErrorMessage_' + n[t].selectionId + '"><\/div >' + (Number(n[t].odds) < oddsThresholdValue ? '<div class="SB-bet-errorMsg d-none" id="betInfoMsg"> ' + GetLocalizedPlacebetMessages("invalidBonusMessage") + "<\/div >" : "") + "<\/div><\/div>";
        e = document.querySelector('div[class="SB-quickBetslip-footer d-none"]');
        e != null && e.classList.remove("d-none");
        nt = bindBetSlipMessage();
        f = '<\/div><div class="SB-betSlip-acceptOddsChange-container"><div class="SB-betSlip-acceptOddsChange"><div class="SB-checkbox"><input type="checkbox" id="acceptOddschange"><label for="acceptOddschange" onclick="acceptOddsCheckBoxClick()"><\/label><span class="SB-checkboxLabel">' + getacceptOddsLabelName + '<\/span><\/div><div class="SB-checkbox"><input type="checkbox" id="keepPlacedBets"><label for="keepPlacedBets" onclick="keepPlacedBetsCheckBoxClick()"><\/label><span class="SB-checkboxLabel">' + GetLocalizedPlacebetMessages("keepBetsLabelName") + '<\/span><\/div><\/div><div class="SB-betSlip-clearAll" onclick="clearBets()"><div class="SB-iconSVG SB-icon-clearBetslip"><svg version="1.1"  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 24 24" style="enable-background:new 0 0 20 20;" xml:space="preserve"><path d="M4,21.3C4,22.8,5.2,24,6.7,24h10.7c1.5,0,2.7-1.2,2.7-2.7v-16H4V21.3z M6.7,8h10.7v13.3H6.7V8z M21.3,1.3V4H2.7V1.3h4.7L8.7,0h6.7l1.3,1.3H21.3z"/><\/svg><\/div><\/div><\/div><div id="placeBetErrorMessageDisplay" class="SB-betSlip-errorMsg-container"><\/div><\/div><div class="SB-betSlip-footer"><div id="maxbetserrormsg" class="SB-maxBetsAdded-errorInfo d-none"><div class="SB-iconSVG"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns: xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml: space="preserve"><path d="M12,2.5l-11,19h22L12,2.5z M12,6.5l7.5,13H4.5L12,6.5z M13,10.5v4h-2v-4H13z M11,16.5h2v2h-2V16.5z"><\/path><\/svg><\/div ><div><\/div><\/div >';
        isBetBuilder || (f += "" + (bonusBetCount !== 0 || invalidBetcount > 0 ? '<div class="SB-addSelections-infoMsg" id="betInfoMsg"> <a href ="/">' + nt + "<\/a><\/div >" : "") + '<div class="SB-stakeBox-container"><div class="SB-stakeBox-content"><div class="SB-stakeBox-container-left"><div class="SB-freeBetCheckBox-container">' + (r !== null && freeBetDetails && freeBetDetails.length > 0 ? '<div class="SB-checkbox"><input id="freeBetChecked" name="" value="check1" type="checkbox" onclick="freeBetClicked()"><label for="freeBetChecked"><\/label><span class="SB-checkboxLabel">' + GetLocalizedPlacebetMessages("freebetLabelName") + "<\/span><\/div>" : "") + '<\/div><div class="SB-bonusBalance-container">' + (r !== null && bonusAmount > 0 ? '<div class="SB-checkbox"><input id="bonusBalance" name="" value="check2" type="checkbox"  onclick="useBonusClicked()"><label for="bonusBalance"><\/label><span class="SB-checkboxLabel">Use Bonus<\/span><\/div>' : "") + '<div class="d-none" id="bonusValue">Bonus: <b>' + CurrencyCode + ' <span id="BonusValue">' + Number(bonusAmount).toFixed(2) + '<\/span><\/b><\/div><\/div ><\/div><div class="SB-stakeBox-container-right"><div id="displayStakeBox"><div class="SB-stakeInputBox SB-form-control"><span>' + CurrencyCode + '<\/span><input type="number" placeholder="Stake" id="stakeValue" onkeyup="return numberValidationMobile()" onkeypress="return enterUserName(event)"/><\/div><\/div><div id="displayFreeBetDropDown"><\/div><\/div><\/div><\/div>');
        f += '<div class="SB-totalStakeOddsWins"><div class="SB-accordion" id="getBetslipAccordianId" onclick="addBetSlipAccordian()">';
        f += '<div class="SB-accordion-header SB-arrowAfter">';
        f += '<div class="SB-totalStakeOddsWins-content"><div class="SB-contentBlock"><div class="SB-leftContent">' + gettotalOddsLabelName + ':<\/div><div class="SB-rightContent">' + getBetSlipOdds + "<\/div><\/div>";
        f += '<div class="SB-contentBlock SB-wht"><div class="SB-leftContent">' + getStakeLabelName
        //place bet button here
        + ':<\/div><div class="SB-rightContent" id="bindDeductedStakeValue">' + CurrencyCode + " " + Number(getStakeValue).toFixed(2) + "<\/div><\/div>" + "";
        f += '<div class="SB-contentBlock"><div class="SB-leftContent SB-txtHighlight">' + GetLocalizedPlacebetMessages("winLabelName") + ':<\/div><div class="SB-rightContent SB-txtHighlight" id="bindWinningValue">' + CurrencyCode + " " + getWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '<\/div><\/div><\/div><\/div><\/div><div class="SB-placeBet-container"><div class="SB-placeBet-container-left" id="displayBookBetButton"><button class="btn SB-btnLarge SB-btnDefault active SB-btnBookABet" onclick="getBetCodesFromApi()">Share Bet<\/button><\/div><div class="SB-placeBet-container-right"><div id="displayPlaceBetButton">' + (r !== null ? '<button class="btn SB-btnLarge SB-btnPlaceBet active" id="disablePlaceBetButton" onclick="placeBetApiCall()"><span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span><\/button>" : '<button class="btn SB-btnLarge SB-btnPlaceBet active" id="disablePlaceBetButton"  onclick="msgprint();" ><span class="SB-btnTxt">' + "Place Bet" + "<\/span><\/button>")
        // data[]getUserBets() ;function clearBets()

        + '<\/div > <div id="displayAcceptOddsButton"><\/div><\/div><\/div><\/div><\/div><div class="SB-betSlip-confirmation-container"><div class="SB-insufficientFunds-deposit-container d-none"><div class="SB-msgBox SB-error"><div class="SB-msgBox-container">You do not have sufficient balance to place the  bet. Please deposit and try again.<\/div><\/div><div class="SB-btn-container"><button class="btn SB-btnDefault active SB-btnLarge SB-btnCancel"  onclick="toggleBetSlipFooter()">Cancel<\/button><button class="btn SB-btnSecondary active SB-btnLarge SB-btnDeposit" onclick="onDepositClick()">Deposit<\/button><\/div><\/div >' + (t ? '<div class="SB-loadBookABet-confirmation-container" id="bookaBetContainer"><div class="SB-msgBox SB-error"><div class="SB-msgBox-container">Do you want remove existing bets?<\/div><\/div><div class="SB-btn-container"><button class="btn SB-btnSecondary active SB-btnLarge SB-btnYes"  onclick="onBookaBetYesClick()">Yes<\/button><button class="btn SB-btnDefault active SB-btnLarge SB-btnNo" onclick="onBookaBetNoClick()">No<\/button><\/div><\/div >' : "") + '<\/div><\/div><div class="SB-overlap-mask d-none" id="maskOnBookbet"><\/div><div class="SB-bookingCodeShare-container d-none" id="BookAbetSection"><div class="SB-bookingCodeShare-header">Share Betslip<div class="SB-closeButton" onclick="closeBookaBet()"><div class="SB-iconSVG SB-icon-close"><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"viewBox="0 0 24 24" style="enable-background:new 0 0 20 20;" xml:space="preserve"><path d="M24,2.4L21.6,0L12,9.6L2.4,0L0,2.4L9.6,12L0,21.6L2.4,24l9.6-9.6l9.6,9.6l2.4-2.4L14.4,12L24,2.4z" /><\/svg><\/div><\/div><\/div><div class="SB-bookingCode-title">Booking Code<\/div><div class="SB-bookingCode"><span id="bookBetCode"><\/span><div class="SB-iconSVG SB-icon-copy" onclick="copybetcode()"><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"viewBox="0 0 24 24" style="enable-background:new 0 0 20 20;" xml:space="preserve"><path d="M16.5,1h-12c-1.1,0-2,0.9-2,2v14h2V3h12V1z M21.5,7v14c0,1.1-0.9,2-2,2h-11c-1.1,0-2-0.9-2-2V7c0-1.1,0.9-2,2-2h11C20.6,5,21.5,5.9,21.5,7z M19.5,7h-11v14h11V7z" /><\/svg><\/div><\/div><div><span id="bookBetCodeDate"><\/span><\/div><div class="SB-space10"><\/div><div class="SB-successMsg"><span id="betCodeCopySuccess"><\/span><\/div><\/div><div class="SB-socialShareButtons SB-hide-mobile SB-show-desktop"><div class="SB-space10"><\/div><div class="SB-successMsg"><span id="sharebetURLCopySuccess"><\/span><\/div><\/div><\/div><\/div>';
        w += u + f;
        a === null || a === undefined || i || (a.innerHTML = w);
        t && hidePlacebetContainer();
        n = JSON.parse(localStorage.getItem("betSlipData"));
        tt = readCookie("userStakeValue");
        isBetBuilder ? betBuilderStakeCalculation() : document.getElementById("stakeValue") !== null && document.getElementById("stakeValue") !== undefined && (document.getElementById("stakeValue").value = getStakeValue !== "" && getStakeValue !== 0 && document.getElementById("stakeValue").value !== null ? getStakeValue : document.getElementById("stakeValue").value === "" && n.length > 0 && tt > 1 ? readCookie("userStakeValue") : placebetDefaultStakeValue,
        numberValidationMobile());
        bindBetSlipMessage();
        o = readCookie("acceptcheck");
        (o === null || o === undefined || o === "undefined") && document.getElementById("acceptOddschange") !== null ? (document.getElementById("acceptOddschange").checked = !0,
        it = document.getElementById("acceptOddschange").checked,
        createCookie("acceptcheck", JSON.parse(it), 30)) : (document.getElementById("acceptOddschange") !== null && (document.getElementById("acceptOddschange").checked = JSON.parse(o)),
        createCookie("acceptcheck", JSON.parse(o), cookieExpiryTime));
        s = readCookie("keepbetscheck");
        (s === null || s === undefined || s === "undefined") && document.getElementById("keepPlacedBets") !== null ? (document.getElementById("keepPlacedBets").checked = !0,
        rt = document.getElementById("keepPlacedBets").checked,
        createCookie("keepbetscheck", JSON.parse(rt), cookieExpiryTime)) : (document.getElementById("keepPlacedBets") !== null && (document.getElementById("keepPlacedBets").checked = JSON.parse(s)),
        createCookie("keepbetscheck", JSON.parse(s), cookieExpiryTime));
        ut = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        p = document.getElementsByClassName("SB-betSlip-dateandtime");
        for (let n = 0; n < p.length; n++) {
            let t = p[n].attributes["data-dateandtime"].value;
            var ft = t + " UTC"
              , v = new Date(ft)
              , et = new Date;
            getEXactYear = v.getFullYear();
            getExactDate = addZero(v.getDate());
            getExactTime = addZero(v.getHours()) + ":" + addZero(v.getMinutes());
            p[n].innerHTML = "" + getExactDate + " " + ut[v.getMonth()] + "  at " + getExactTime + ""
        }
        r !== null ? (h = document.getElementById("hideLoginButtonInBetslip"),
        h !== null && (h.innerHTML = "")) : (c = document.getElementById("betslipUserBalance"),
        l = document.getElementById("betslipDepositButton"),
        c !== null && (c.innerHTML = ""),
        l !== null && (l.innerHTML = ""));
        document.body.classList.contains("SB-rightMenu-opened")
    } else
        a !== null && (a.innerHTML = '<div class="SB-rightMenu-main-content"><div class="SB-betSlip-container"><div class="SB-betSlip-header"><div class="SB-betslipMyBets-tabs"><ul><li class="active" id="betslip" onclick="betslipMybetsTabClick(event)">Betslip <span class="SB-betsCount">0<\/span><\/li>' + (r != null && r != "" ? '<li id="mybets" onclick="betslipMybetsTabClick(event)">My Bets <span class="SB-betsCount d-none"><\/span><\/li>' : '<li id="mybets"><\/li>') + '<\/ul><\/div><div class="SB-betSlip-closeButton" id="BLM-betSlip-closeButton" onclick="hideOpenedBetSlip()"><img src="/static/images/betslip-close.svg" /><\/div><\/div>  <div class="SB-betSlip-empty-content"><div class="SB-betSlip-msgBox"><div class="SB-icon-container"><div class="SB-iconSVG SB-icon-betslip"><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns: xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 24 24" style="enable-background:new 0 0 20 20;" xml: space="preserve"><path d="M15,9h3v3h-3V9z M6,9h3v3H6V9z M10.5,9h3v3h-3V9z M21,0h-4.8C15.6,1.7,14,3,12,3c-2,0-3.6-1.3-4.2-3H3C2.2,0,1.5,0.7,1.5,1.5v21C1.5,23.3,2.2,24,3,24h4.8c0.6-1.7,2.3-3,4.2-3c2,0,3.6,1.3,4.2,3H21c0.8,0,1.5-0.7,1.5-1.5v-21C22.5,0.7,21.8,0,21,0z M19.5,21H18c-1.4-1.8-3.5-3-6-3s-4.6,1.2-6,3H4.5V3H6c1.4,1.8,3.5,3,6,3c2.5,0,4.6-1.2,6-3h1.5V21z"/><\/svg><\/div><\/div><div class="SB-emptyBetslipMsg">' + GetLocalizedPlacebetMessages("displayBetslipEmpty") + '<\/div><\/div><div class=""><div class="SB-OR"><span class="SB-OR-line"><\/span><span class="SB-OR-txt">OR<\/span><span class="SB-OR-line"><\/span><\/div><div class="SB-content"><div class="SB-form-group SB-bookingCode-field"><div class="SB-form-label text-center">Do you have a booked betslip code? Please enter it here.<\/div><div class="SB-form-control"><input type="text" id="betcodeSelections" maxlength="6" onkeypress="return isAlphaNumerics(event);" placeholder="eg: 521GY" /><\/div><div class="SB-form-errorMsg"><span id="betcodeSelectionsError"><\/span><\/div><div id="maxbetserrormsg" class="SB-maxBetsAdded-errorInfo d-none"><div class="SB-iconSVG"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns: xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml: space="preserve"><path d="M12,2.5l-11,19h22L12,2.5z M12,6.5l7.5,13H4.5L12,6.5z M13,10.5v4h-2v-4H13z M11,16.5h2v2h-2V16.5z"><\/path><\/svg><\/div ><div><\/div><\/div><button class="btn SB-btnSecondary active SB-btnLarge" onclick="loadBetcodeSelections()">Load Betslip<\/button><\/div><\/div><\/div><\/div><\/div>'),
        r !== null ? (h = document.getElementById("hideLoginButtonInBetslip"),
        h !== null && (h.innerHTML = "")) : (c = document.getElementById("betslipUserBalance"),
        l = document.getElementById("betslipDepositButton"),
        c !== null && (c.innerHTML = ""),
        l !== null && (l.innerHTML = "")),
        document.body.classList.contains("SB-rightMenu-opened") && addBetSlipAccordian(),
        e = document.querySelector('div[class="SB-quickBetslip-footer"]'),
        e != null && e.classList.add("d-none")
}
function hidePlacebetContainer() {
    for (var t = document.getElementsByClassName("SB-stakeBox-container"), i = document.getElementsByClassName("SB-totalStakeOddsWins"), r = document.getElementsByClassName("SB-placeBet-container"), n = 0; n < t.length; n++)
        t[n] !== null && t[n].classList.add("d-none"),
        i[n] !== null && i[n].classList.add("d-none"),
        r[n] !== null && r[n].classList.add("d-none")
}
function onBookaBetNoClick() {
    var n = JSON.parse(localStorage.getItem("betSlipData"));
    getBetSlip(n)
}
function onBookaBetYesClick() {
    clearBets()
}
function bindBetSlipMessage() {
    var n, t, i;
    noOfBets = betSlipData !== undefined && betSlipData !== null ? checkBonusEligibilty(betSlipData) : 0;
    var u = GetLocalizedPlacebetMessages("betslipMultibetMsg").replace("bonusBetCount", bonusBetCount).replace("noOfBets", multiBetBonusobj[noOfBets])
      , f = GetLocalizedPlacebetMessages("invalidBonusMessage")
      , r = invalidBetcount > 0 ? f : u;
    return isBetBuilder || (n = document.getElementById("bonusBetMessage"),
    n && (n.innerText = r)),
    t = document.getElementById("oddsMessage"),
    t && (t.innerText = gettotalOddsLabelName + ": " + getBetSlipOdds),
    i = document.getElementById("toWinMessage"),
    i && (i.innerText = GetLocalizedPlacebetMessages("winLabelName") + ": " + CurrencyCode + " " + getWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")),
    r
}
function checkBonusEligibilty(n) {
    var i = 0, t = Object.keys(multiBetBonusobj).map(Number), s = Number(t[t.length - 1]), u, e, h, f;
    if (n !== null && n !== undefined && n.length >= minBetCount)
        if (n.length >= s)
            bonusBetCount = 1,
            i = n.length + 1,
            bonusPercentageValue = maxPercentage;
        else {
            u = n.length;
            e = Object.keys(multiBetBonusobj).map(Number);
            getNearestValue(e, u);
            var r = e[0]
              , c = u - r >= 0 ? t.indexOf(r) + 1 : t.indexOf(r)
              , o = c;
            bonusBetCount = t[o] - n.length;
            i = t[o];
            bonusPercentageValue = u - r >= 0 ? r : t[o - 1]
        }
    return h = Number(invalidBetcount) > 0 ? n.length - Number(invalidBetcount) : n.length,
    f = h < minBetCount ? minBetCount : i,
    i = n.length < minBetCount && validBetcount < minBetCount - 1 ? minBetCount : f > maxPercentage ? maxPercentage : f,
    (f > s || multiBetBonusobj[i] == 0) && (bonusBetCount = 0),
    isShowOddsThresholdMessage = !1,
    isBonusExists = !1,
    invalidBetcount > 0 ? (isShowOddsThresholdMessage = !0,
    isBonusExists = !1) : getBonusReturns(),
    i
}
function getNearestValue(n, t) {
    n.sort((n,i)=>Math.abs(t - n) - Math.abs(t - i))
}
function validateBonusOdds(n, t) {
    isOddsInvalid = !1;
    n[t].odds < oddsThresholdValue && (isOddsInvalid = !0,
    invalidBetcount = Number(invalidBetcount) + 1,
    bonusBetCount = Number(bonusBetCount) === 0 ? Number(minBetCount) : Number(bonusBetCount));
    n[t].odds >= oddsThresholdValue && n.length < minBetCount && (validBetcount = Number(validBetcount) + 1,
    bonusBetCount = Number(minBetCount) - Number(validBetcount))
}
function addBetSlipAccordian() {
    var n = document.getElementById("getBetslipAccordianId");
    n !== null && n.classList.toggle("collapsed")
}
function addZero(n) {
    return n < 10 ? "0" + n : n
}
function clearStakeValue() {
    var f = document.getElementById("stakeValue"), n, t, i, r, u;
    f !== null && (f.value = "");
    n = document.getElementById("bindWhtValue");
    n !== null && (n.innerHTML = CurrencyCode + " 0");
    t = document.getElementById("bindWinningValue");
    t !== null && (t.innerHTML = CurrencyCode + " 0");
    getStakeValue = 0;
    getOriginalStakeValue = 0;
    getExciseValue = 0;
    createCookie("userStakeValue", "", -1);
    isShowPayoutMessage = !1;
    i = document.getElementById("bindExciseValue");
    r = document.getElementById("bindDeductedStakeValue");
    i !== null && (i.innerHTML = CurrencyCode + " 0");
    r !== null && (r.innerHTML = CurrencyCode + " 0");
    u = document.getElementById("bindBonusValue");
    u != null && (u.innerHTML = CurrencyCode + " 0")
}
function freeBetClicked(n) {
    var f, a, y, t, e, o, p, w, v, s, h, i, c, r, u, b;
    isShowPayoutMessage = !1;
    let l = "";
    if (f = !1,
    a = document.getElementById("freeBetChecked"),
    (n === !0 || n === "true" || a !== null && a.checked) && (f = !0,
    document.getElementById("freeBetChecked").checked = !0,
    y = document.getElementById("bonusValue"),
    t = document.getElementById("bonusBalance"),
    t != null && t.checked && (t.checked = !1,
    y.classList.toggle("d-none"))),
    createCookie("bonusBalance", f, cookieExpiryTime),
    f === !0) {
        e = document.getElementById("displayFreeBetDropDown");
        o = document.getElementById("displayStakeBox");
        l += '<div class="SB-freeBetDropDown-container"><div class="SB-select"><select onchange="getFreeBetId(value)">';
        for (let n = 0; n < freeBetDetails.length; n++)
            l += '<option id="getFreeBetWalletId_' + freeBetDetails[n].id + '" value="' + freeBetDetails[n].id + '">' + CurrencyCode + " " + freeBetDetails[n].credit + "<\/option>";
        createCookie("defWalletId", freeBetDetails[0].id, cookieExpiryTime);
        p = readCookie("defWalletId");
        o.innerHTML = "";
        e.innerHTML = l;
        w = document.getElementById("getFreeBetWalletId_" + p + "").innerHTML;
        v = w.split(" ");
        getStakeValue = v[1];
        getOriginalStakeValue = v[1];
        getExciseValue = 0;
        getReturns = getStakeValue * getBetSlipOdds;
        Number(getReturns) > Number(placebetMaxReturnsValue) && (isShowPayoutMessage = !0);
        IsWHTExists ? (getWhtValue = (getReturns - getOriginalStakeValue) * (WHTValue / 100),
        getWinningAmount = getReturns) : getWinningAmount = getReturns;
        s = document.getElementById("bindDeductedStakeValue");
        s.innerHTML = CurrencyCode + " " + getStakeValue;
        h = document.getElementById("bindWinningValue");
        h.innerHTML = CurrencyCode + " " + getReturns.toFixed(2);
        i = document.getElementById("bindWhtValue");
        i !== null && (i.innerHTML = CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
        c = document.getElementById("bindWinningValue");
        c.innerHTML = CurrencyCode + " " + getWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        r = document.getElementById("bindExciseValue");
        u = document.getElementById("bindDeductedStakeValue");
        r !== null && (r.innerHTML = CurrencyCode + " " + Number(getExciseValue).toFixed(2));
        u !== null && (u.innerHTML = CurrencyCode + " " + Number(getStakeValue).toFixed(2))
    } else
        f === !1 && (e = document.getElementById("displayFreeBetDropDown"),
        o = document.getElementById("displayStakeBox"),
        o.innerHTML = t != null && t.checked ? '<div class="SB-stakeInputBox SB-form-control"<span>' + CurrencyCode + '<\/span><input type="text" placeholder="' + getStakeLabelName + '" id="stakeValue" onkeyup="return numberValidationMobile()" onkeypress="return enterUserName(event)"/><div class="SB-iconSVG SB-closeIcon" onclick="clearStakeValue()"><svg version="1.1"xmlns="http://www.w3.org/2000/svg"xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve"><path d="M15.3,12l8-8c0.9-1,0.9-2.4,0-3.3c-0.9-0.9-2.5-0.9-3.3,0l-8,8l-8-8c-0.9-0.9-2.5-0.9-3.3,0C0.2,1.1,0,1.7,0,2.3C0,3,0.2,3.6,0.7,4l8,8l-8,8C0.2,20.4,0,21,0,21.6c0,0.6,0.2,1.2,0.7,1.7c0.9,0.9,2.5,0.9,3.3,0l8-8l8,8c0.4,0.4,1,0.7,1.7,0.7c0.6,0,1.2-0.2,1.7-0.7c0.4-0.4,0.7-1,0.7-1.7c0-0.6-0.2-1.2-0.7-1.7L15.3,12z"><\/path><\/svg><\/div ><\/div>' : '<div class="SB-stakeInputBox SB-form-control"<span>' + CurrencyCode + '<\/span><input type="text" placeholder="' + getStakeLabelName + '" id="stakeValue" onkeyup="return numberValidationMobile()" onkeypress="return enterUserName(event)"/><\/div>',
        e.innerHTML = "",
        b = document.getElementById("stakeValue"),
        b.value = "",
        s = document.getElementById("bindDeductedStakeValue"),
        s.innerHTML = CurrencyCode + " 0",
        h = document.getElementById("bindWinningValue"),
        h.innerHTML = CurrencyCode + " 0",
        getStakeValue = 0,
        getOriginalStakeValue = 0,
        getExciseValue = 0,
        getReturns = 0,
        getWhtValue = 0,
        getWinningAmount = 0,
        i = document.getElementById("bindWhtValue"),
        i !== null && (i.innerHTML = CurrencyCode + " 0"),
        c = document.getElementById("bindWinningValue"),
        c.innerHTML = CurrencyCode + " 0",
        r = document.getElementById("bindExciseValue"),
        u = document.getElementById("bindDeductedStakeValue"),
        r !== null && (r.innerHTML = CurrencyCode + " 0"),
        u !== null && (u.innerHTML = CurrencyCode + " 0"))
}
function getFreeBetId(n) {
    var f, t, e, o, i, s, r, u;
    isShowPayoutMessage = !1;
    betPlaceObject = [];
    createCookie("walletId", n, cookieExpiryTime);
    f = document.getElementById("getFreeBetWalletId_" + n + "").innerHTML;
    t = f.split(" ");
    getStakeValue = t[1];
    getOriginalStakeValue = t[1];
    getExciseValue = 0;
    getReturns = getStakeValue * getBetSlipOdds;
    Number(getReturns) > Number(placebetMaxReturnsValue) && (getReturns = placebetMaxReturnsValue,
    getStakeValue = getReturns / getBetSlipOdds,
    isShowPayoutMessage = !0);
    IsWHTExists ? (getWhtValue = (getReturns - getOriginalStakeValue) * (WHTValue / 100),
    getWinningAmount = getReturns) : getWinningAmount = getReturns;
    e = document.getElementById("bindDeductedStakeValue");
    e.innerHTML = CurrencyCode + " " + getStakeValue;
    o = document.getElementById("bindWinningValue");
    o.innerHTML = CurrencyCode + " " + getReturns.toFixed(2);
    i = document.getElementById("bindWhtValue");
    i !== null && (i.innerHTML = CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
    s = document.getElementById("bindWinningValue");
    s.innerHTML = CurrencyCode + " " + getWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    r = document.getElementById("bindExciseValue");
    u = document.getElementById("bindDeductedStakeValue");
    r !== null && (r.innerHTML = CurrencyCode + " " + Number(getExciseValue).toFixed(2));
    u !== null && (u.innerHTML = CurrencyCode + " " + Number(getStakeValue).toFixed(2))
}

// place bet api Login betslipdata

function placeBetApiCall()
//if betslipdata array

{
    var i = document.getElementById("disablePlaceBetButton"), f, tt, h, n, e, c, o, t, w, b, l, k, d, a, v, g;
    i.disabled = !0;
    i.innerHTML = '<div class="SB-loader"><div class="SB-dot-pulse"><span><\/span><span><\/span><span><\/span><\/div><\/div>';
    betPlaceObject = [];
    var y = readCookie("walletId")
      , nt = readCookie("defWalletId")
      , p = !1;
    document.getElementById("freeBetChecked") !== null && (f = document.getElementById("freeBetChecked").checked,
    p = document.getElementById("freeBetChecked").checked);
    tt = document.getElementById("getFreeBetWalletId_" + nt + "") !== null && (y === null || y === undefined) ? document.getElementById("getFreeBetWalletId_" + nt + "").value : y;
    document.getElementById("bonusBalance") !== null && (isUseBonusChecked = document.getElementById("bonusBalance").checked);
    h = document.getElementById("acceptOddschange").checked;
    n = [];
    n = JSON.parse(localStorage.getItem("betSlipData"));
    e = readCookie("token");
    c = readCookie("user");
    o = freeBetDetails !== undefined && freeBetDetails !== null && freeBetDetails.length > 0 && f === !0 && p == !0 ? {
        acceptoddschange: h,
        amount: Number(getStakeValue),
        bonusFunds: isUseBonusChecked,
        isBetBuilder: isBetBuilder,
        logMob: Number(c),
        selections: "",
        trk: trk,
        twToken: e,
        walletId: Number(tt)
    } : isUseBonusChecked == !0 ? {
        acceptoddschange: h,
        amount: Number(getStakeValue),
        bonusFunds: isUseBonusChecked,
        isBetBuilder: isBetBuilder,
        logMob: Number(c),
        selections: "",
        trk: trk,
        twToken: e
    } : {
        acceptoddschange: h,
        amount: Number(getActualValue),
        bonusFunds: isUseBonusChecked,
        isBetBuilder: isBetBuilder,
        logMob: Number(c),
        selections: "",
        trk: trk,
        twToken: e
    };
    var it = !0
      , rt = !0
      , ut = !0
      , u = 0
      , s = document.querySelectorAll("[id^=stakeValue_]");
    for (let n = 0; n < s.length; n++)
        s[n].value > 0 && (u += Number(s[n].value));
    if (s !== null && s !== undefined && u !== null && u !== undefined && (Number(u).toString().indexOf(".") >= 0 ? ut = !1 : Number(u) < placebetMinStakeValue ? it = !1 : Number(u) > placebetMaxStakeValue && (rt = !1)),
    document.getElementById("stakeValue") !== null && (getOriginalStakeValue = document.getElementById("stakeValue").value),
    isBetBuilder && !ut)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetdecimalErrorMsg") + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (isBetBuilder && !it)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetMinStakeAmountMsg") + placebetMinStakeValue + " " + CurrencyCode + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (isBetBuilder && !rt)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetMaxStakeAmountExceedMsg") + placebetMaxStakeValue + " " + CurrencyCode + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (getOriginalStakeValue.toString().indexOf(".") >= 0 && !isBetBuilder)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetdecimalErrorMsg") + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (isShowPayoutMessage === !0 && Number(getReturns) / Number(getBetSlipOdds) < maxBetsCount && !isBetBuilder || isShowPayoutMessage === !0 && !isBetBuilder)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetMaxAmountExceedMsg") + placebetMaxAmount + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (Number(getOriginalStakeValue) < Number(placebetMinStakeValue) && !isBetBuilder)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetMinStakeAmountMsg") + placebetMinStakeValue + " " + CurrencyCode + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (Number(getOriginalStakeValue) > placebetMaxStakeValue && !isBetBuilder)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("placebetMaxStakeAmountExceedMsg") + placebetMaxStakeValue + " " + CurrencyCode + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (isUseBonusChecked && f && !isBetBuilder)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("bonusFreebetErrorMessage") + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (isUseBonusChecked && Number(getOriginalStakeValue) > bonusAmount && !isBetBuilder)
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + GetLocalizedPlacebetMessages("bonusStakeErrorMessage") + "<\/span><\/div><\/div>",
        t.scrollIntoView(),
        placebetEnablebutton();
    else if (e !== null) {
        if (freeBetDetails.length > 0 && f === !0) {
            if (w = 0,
            b = 0,
            n.length > 0)
                for (l = 0; l < n.length; l++)
                    n[l].isLive === "True" ? w = w + 1 : b = b + 1
        } else
            for (k = 0,
            d = 0,
            a = 0; a < n.length; a++)
                n[a].isLive === "True" ? k = k + 1 : d = d + 1;
        if (v = readCookie("balance"),
        t = document.getElementById("placeBetErrorMessageDisplay"),
        t.innerHTML = "",
        isBetBuilder && Number(v) < Number(u))
            toggleBetSlipFooter(),
            i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>";
        else if ((isUseBonusChecked === !1 || isUseBonusChecked === undefined) && p === !1 && Number(v) < Number(getOriginalStakeValue) && !isBetBuilder)
            toggleBetSlipFooter(),
            i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>";
        else if ((isUseBonusChecked === !1 || isUseBonusChecked === undefined) && f === !1 && Number(v) < Number(getOriginalStakeValue) && !isBetBuilder)
            toggleBetSlipFooter(),
            i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>";
        else {
            if (n !== null && n !== undefined) {
                g = document.querySelectorAll("[id^=stakeValue_]");
                for (let t = 0; t < n.length; t++)
                    if (Number(n[t].selectionId) <= 0) {
                        o.isBetBuilder || (o.isBetBuilder = !0);
                        var et = n[t].priceId
                          , ot = 0
                          , ft = 0;
                        ot = Number(g[t].value) * (ConfigStakeTaxValue / 100) / (ConfigExiceTaxPercantage / 100);
                        ft = Number(g[t].value) - excisevalue;
                        betPlaceObject.push({
                            amount: Number(ft),
                            priceIds: et
                        })
                    } else
                        betPlaceObject.push({
                            selid: Number(n[t].selectionId),
                            odds: Number(n[t].odds),
                            priceid: Number(n[t].priceId),
                            marketid: Number(n[t].marketId),
                            eventid: Number(n[t].eventId)
                        })
            }
            o.selections = betPlaceObject;
            var r = new XMLHttpRequest
              , st = globalPlaceBetUrl
              , ht = o;
            r.open("POST", st, !0);
            r.setRequestHeader("Content-type", "application/json");
            r.onreadystatechange = function() {
                var o, e, u, s, f, h, c, l;
                if (r.readyState === 4 && r.status === 200) {
                    let a = JSON.parse(r.responseText);
                    if (a.hasOwnProperty("error")) {
                        if (a.errorType === "INVALID_AUTHENTICATION")
                            i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                            createCookie("token", "", -1),
                            createCookie("balance", "", -1),
                            createCookie("betsCount", "", -1),
                            createCookie("walletId", "", -1),
                            createCookie("defWalletId", "", -1),
                            createCookie("userNumber", "", -1),
                            createCookie("customerId", "", -1),
                            createCookie("depositPopUp", "", -1),
                            createCookie("jackpotPopUp", "", -1),
                            createCookie("picksixPopUp", "", -1),
                            createCookie("registration", "", -1),
                            createCookie("freebet", "", -1),
                            createCookie("email", "", -1),
                            createCookie("PhoneNumber", "", -1),
                            createCookie("userStakeValue", "", -1),
                            createCookie("acceptcheck", "", -1),
                            createCookie("hasDeposited", "", -1),
                            createCookie("user", "", -1),
                            createCookie("keepbetscheck", "", -1),
                            createAppDomainCookie("user", "", -1),
                            createAppDomainCookie("AppSession", "", -1),
                            createAppDomainCookie_Pick6("AppSession", "", -1),
                            createAppDomainCookie_Pick6("userId", "", -1),
                            createAppDomainCookie_Pick6("userNumber", "", -1),
                            createAppDomainCookie_Pick6("CurrencyCode", "", -1),
                            createAppDomainCookie_Pick6("UserCulture", "", -1),
                            createAppDomainCookie_Games("AppSession", "", -1),
                            createAppDomainCookie_Games("userId", "", -1),
                            createAppDomainCookie_Games("userNumber", "", -1),
                            createAppDomainCookie_Games("CurrencyCode", "", -1),
                            createAppDomainCookie_Games("UserCulture", "", -1),
                            window.location.href = "/Logins";
                        else if (a.errorType === "INSUFFICIENT_BALANCE")
                            i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                            window.location.href = globalConfig.depositSiteURL;
                        else if (a.errorType === "ODDS_CHANGED")
                            i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                            oddsChangedArray.push(a.selections),
                            h = document.getElementById("displayPlaceBetButton"),
                            c = document.getElementById("displayAcceptOddsButton"),
                            h.innerHTML = "",
                            c.innerHTML = '<button class="btn SB-btnPrimary active SB-btnLarge SB-btnAcceptOddsChange" onclick="acceptChanges()">' + getacceptOddsLabelName + "<\/button>";
                        else if (i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                        t = document.getElementById("placeBetErrorMessageDisplay"),
                        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + a.message + "<\/span><\/div><\/div>",
                        t.scrollIntoView(),
                        a.hasOwnProperty("marketId"))
                            for (let t = 0; t < n.length; t++)
                                Number(n[t].marketId) === Number(a.marketId) && (l = document.getElementById("highlightCompletedMatchBet_" + t),
                                l.classList.add("SB-betSuspended"))
                    } else if (a !== null && a.result !== null && a.result.length !== undefined && a.result.length > 0)
                        if (i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                        t = document.getElementById("placeBetErrorMessageDisplay"),
                        t.innerHTML = "",
                        a.result[0].hasOwnProperty("twToken")) {
                            if (createCookie("token", a.result[0].twToken, cookieExpiryTime),
                            o = !1,
                            isBetBuilder) {
                                if (e = [],
                                e = a.result,
                                e !== null || e !== undefined) {
                                    for (let t = 0; t < e.length; t++) {
                                        if (u = a.result[t].selections,
                                        u !== null)
                                            for (getBetReceiptTotalOdds = 1,
                                            j = 0; j < u.length; j++)
                                                getBetReceiptTotalOdds = getBetReceiptTotalOdds * u[j].odds;
                                        if (n.length > 0) {
                                            for (let i = 0; i < n.length; i++)
                                                i === t && (n[t].isBetBuilder = !0,
                                                n[t].betslipID = a.result[t].betslipID,
                                                n[t].maxPayout = a.result[t].maxPayout,
                                                n[t].totalstake = a.result[t].unitStake,
                                                n[t].totalOdds = getBetReceiptTotalOdds,
                                                document.getElementById("highlightBet_" + n[i].selectionId) !== null && removeHighlightBets("highlightBet_" + n[i].selectionId));
                                            n.length > 1 && (o = !0)
                                        }
                                        updatedArrayBetslip = n;
                                        facebookPixelTrackerPlaceBet(getOriginalStakeValue, CurrencyCode, o)
                                    }
                                    n = [];
                                    f = document.getElementById("getBetsCountDisplay");
                                    f != null && (f.innerHTML = n.length);
                                    localStorage.setItem("betSlipData", JSON.stringify(n))
                                }
                            } else {
                                if (u = a.result[0].selections,
                                u !== null) {
                                    for (getBetReceiptTotalOdds = 1,
                                    j = 0; j < u.length; j++)
                                        getBetReceiptTotalOdds = getBetReceiptTotalOdds * u[j].odds;
                                    getPotentialWinningAmount = a.result[0].maxPayout
                                }
                                if (n.length > 0) {
                                    for (let t = 0; t < n.length; t++)
                                        n[t].isBetBuilder = !1,
                                        n[t].betslipID = a.result[0].betslipID,
                                        document.getElementById("highlightBet_" + n[t].selectionId) !== null && removeHighlightBets("highlightBet_" + n[t].selectionId);
                                    n.length > 1 && (o = !0)
                                }
                                updatedArrayBetslip = n;
                                bonusamountReciept = 0;
                                s = document.getElementById("bindBonusValue");
                                s !== null && s !== undefined && (bonusamountReciept = s.innerHTML.trim());
                                n = [];
                                f = document.getElementById("getBetsCountDisplay");
                                f != null && (f.innerHTML = n.length);
                                localStorage.setItem("betSlipData", JSON.stringify(n))
                            }
                            getUserBalance("success")
                        } else
                            i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                            createCookie("token", "", -1),
                            createCookie("balance", "", -1),
                            createCookie("betsCount", "", -1),
                            createCookie("walletId", "", -1),
                            createCookie("defWalletId", "", -1),
                            createCookie("userNumber", "", -1),
                            createCookie("customerId", "", -1),
                            createCookie("depositPopUp", "", -1),
                            createCookie("jackpotPopUp", "", -1),
                            createCookie("picksixPopUp", "", -1),
                            createCookie("registration", "", -1),
                            createCookie("freebet", "", -1),
                            createCookie("email", "", -1),
                            createCookie("PhoneNumber", "", -1),
                            createCookie("userStakeValue", "", -1),
                            createCookie("acceptcheck", "", -1),
                            createCookie("hasDeposited", "", -1),
                            createCookie("user", "", -1),
                            createCookie("keepbetscheck", "", -1),
                            createAppDomainCookie("user", "", -1),
                            createAppDomainCookie("AppSession", "", -1),
                            createAppDomainCookie_Pick6("AppSession", "", -1),
                            createAppDomainCookie_Pick6("userId", "", -1),
                            createAppDomainCookie_Pick6("userNumber", "", -1),
                            createAppDomainCookie_Pick6("CurrencyCode", "", -1),
                            createAppDomainCookie_Pick6("UserCulture", "", -1),
                            createAppDomainCookie_Games("AppSession", "", -1),
                            createAppDomainCookie_Games("userId", "", -1),
                            createAppDomainCookie_Games("userNumber", "", -1),
                            createAppDomainCookie_Games("CurrencyCode", "", -1),
                            createAppDomainCookie_Games("UserCulture", "", -1),
                            window.location.href = "/Logins";
                    else
                        i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                        t = document.getElementById("placeBetErrorMessageDisplay"),
                        t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>Unable to place bet.Sorry,due to an unexpected error,your request cannot be completed.<\/span><\/div><\/div>',
                        t.scrollIntoView()
                } else
                    r.status !== 200 && (i.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>",
                    t = document.getElementById("placeBetErrorMessageDisplay"),
                    t.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>Unable to place bet.Sorry,due to an unexpected error,your request cannot be completed.<\/span><\/div><\/div>',
                    t.scrollIntoView());
                i.disabled = !1
            }
            ;
            r.send(JSON.stringify(ht))
        }
    } else

        createCookie("pageFrom", "betslip", 1),
        createCookie("token", "", -1),
        createCookie("balance", "", -1),
        createCookie("betsCount", "", -1),
        createCookie("walletId", "", -1),
        createCookie("defWalletId", "", -1),
        createCookie("userNumber", "", -1),
        createCookie("customerId", "", -1),
        createCookie("depositPopUp", "", -1),
        createCookie("jackpotPopUp", "", -1),
        createCookie("picksixPopUp", "", -1),
        createCookie("registration", "", -1),
        createCookie("freebet", "", -1),
        createCookie("email", "", -1),
        createCookie("PhoneNumber", "", -1),
        createCookie("userStakeValue", "", -1),
        createCookie("acceptcheck", "", -1),
        createCookie("hasDeposited", "", -1),
        createCookie("user", "", -1),
        createCookie("keepbetscheck", "", -1),
        createAppDomainCookie("user", "", -1),
        createAppDomainCookie("AppSession", "", -1),
        createAppDomainCookie_Pick6("AppSession", "", -1),
        createAppDomainCookie_Pick6("userId", "", -1),
        createAppDomainCookie_Pick6("userNumber", "", -1),
        createAppDomainCookie_Pick6("CurrencyCode", "", -1),
        createAppDomainCookie_Pick6("UserCulture", "", -1),
        createAppDomainCookie_Games("AppSession", "", -1),
        createAppDomainCookie_Games("userId", "", -1),

        msgprint()

    //place bet url here push betslipdata Placebet post
    createAppDomainCookie_Games("userNumber", "", -1),
    createAppDomainCookie_Games("CurrencyCode", "", -1),
    createAppDomainCookie_Games("UserCulture", "", -1),
    window.location.href = "/Placebet"
}
function msgprint() {
    var l = readCookie("token"), u = readCookie("balance"), h, n, r, f, e, o, c, t, s;
    u !== null && (u = u.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
    h = document.getElementById("betslipDisplay");
    n = "";
    n += '<div class="SB-rightMenu-main-content"><div class="SB-betSlip-container"><div class="SB-betSlip-header"><div class="SB-betslipMyBets-tabs"><ul><li class="active" id="betslip" onclick="betslipMybetsTabClick(event)">Betslip <span class="SB-betsCount active">' + updatedArrayBetslip.length + '<\/span><\/li><li id="mybets" onclick="betslipMybetsTabClick(event)">My Bets <span class="SB-betsCount d-none"><\/span><\/li><\/ul><\/div><div class="SB-betSlip-closeButton" id="BLM-betSlip-closeButton" onclick="hideOpenedBetSlip()"><img src="/static/images/betslip-close.svg" /><\/div><\/div><div class="SB-betSlip-content"><div class="SB-betReceipt-container"><div class="SB-betReceipt-box"><div class="SB-betReceipt-edge SB-top"><\/div><div class="SB-betReceipt-box-innerContent"><div class="SB-betReceipt-header">' + GetLocalizedPlacebetReceiptMessages("receiptBetLabel") + '<\/div><div class="SB-betReceipt-betSuccessMsg">' + GetLocalizedPlacebetReceiptMessages("PlacebetSuccessMsg") + "<\/div>";
    updatedArrayBetslip[0].isBetBuilder || (n += '<div class="SB-betReceipt-content">');
    for (let t = 0; t < updatedArrayBetslip.length; t++)
        updatedArrayBetslip[t].isBetBuilder && (n += '<div class="SB-betReceipt-content">'),
        n += '<div class="SB-bet-details"><div class="SB-betDeatils-header"><div class="SB-betSlip-outcomeOdds"><span class="SB-betSlip-outcome">' + updatedArrayBetslip[t].outcome + '<\/span><span class="SB-betSlip-odds"><span>' + updatedArrayBetslip[t].odds + '<\/span><\/span><\/div><\/div><div class="SB-betSlip-market">' + updatedArrayBetslip[t].marketName + '<\/div><div class="SB-betSlip-fixture">' + updatedArrayBetslip[t].matchName + ' @ <span class="SB-myBetReceipt-dateandtime" date-mybetreceipttime="' + updatedArrayBetslip[t].kickOffTime + '"><\/span><\/div><\/div>',
        updatedArrayBetslip[t].isBetBuilder && (n += '<\/div><div class="SB-betReceipt-footer"><div class="SB-betReceipt-details-container"><div class="SB-contentBlock"><div class="SB-leftContent">' + GetLocalizedPlacebetReceiptMessages("receiptBettypeLabel") + ':<\/div><div class="SB-rightContent"><b>' + (updatedArrayBetslip.length == 1 ? GetLocalizedPlacebetReceiptMessages("betTypeSingle") : GetLocalizedPlacebetReceiptMessages("betTypeMultiple")) + '<\/b> <\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + GetLocalizedPlacebetReceiptMessages("betReceiptIdLabel") + ':<\/div><div class="SB-rightContent"><b>' + updatedArrayBetslip[t].betslipID + '<\/b> <\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + GetLocalizedPlacebetReceiptMessages("betReceiptPlacedOnLabel") + ':<\/div><div class="SB-rightContent"><b id="getPlacedOnDate_' + t + '"><\/b><\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + gettotalOddsLabelName + ':<\/div><div class="SB-rightContent"> <b>' + Number(updatedArrayBetslip[t].odds).toFixed(2) + '<\/b> <\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + getbetReceiptTotalStakeLabel + ':<\/div><div class="SB-rightContent"><b>' + CurrencyCode + " " + Number(updatedArrayBetslip[t].totalstake).toFixed(2) + "<\/b><\/div><\/div>" + (IsExciseDutyExists === !0 ? '<div class="SB-contentBlock"><div class="SB-leftContent">' + getexciseDutyLabelName + ':<\/div><div class="SB-rightContent"><b>' + CurrencyCode + " " + Number(getExciseValue).toFixed(2) + "<\/b><\/div><\/div>" : "") + "" + (IsWHTExists === !0 ? '<div class="SB-contentBlock"><div class="SB-leftContent">' + getwhtLabelName + ':<\/div><div class="SB-rightContent"><b>' + CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "<\/b><\/div><\/div>" : "") + '<div class="SB-contentBlock"><div class="SB-leftContent SB-txtHighlight">' + getbetReceiptWinLabel + ':<\/div><div class="SB-rightContent SB-txtHighlight"><b>' + CurrencyCode + " " + updatedArrayBetslip[t].maxPayout.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "<\/b><\/div><\/div><\/div><\/div>");
    updatedArrayBetslip[0].isBetBuilder && (n += '<div class="SB-betReceipt-edge SB-bottom"><\/div><\/div><\/div><div class="SB-betReceipt-btnClose"><button class="btn SB-btnSecondary SB-btnMedium active SB-btnClose" onclick="closeBetReceipt()">' + GetLocalizedPlacebetReceiptMessages("continueBettingMsg") + "<\/button><\/div><\/div><\/div><\/div><\/div>");
    updatedArrayBetslip[0].isBetBuilder || (r = document.getElementById("bindBonusValue"),
    r !== null && r !== undefined && (bonusamountReciept = r.innerHTML.trim()),
    n += '<\/div><div class="SB-betReceipt-footer"><div class="SB-betReceipt-details-container"><div class="SB-contentBlock"><div class="SB-leftContent">' + GetLocalizedPlacebetReceiptMessages("receiptBettypeLabel") +
    ':<\/div><div class="SB-rightContent"><b>' + (updatedArrayBetslip.length == 1 ? GetLocalizedPlacebetReceiptMessages("betTypeSingle") : GetLocalizedPlacebetReceiptMessages("betTypeMultiple")) + '<\/b> <\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + GetLocalizedPlacebetReceiptMessages("betReceiptIdLabel") + ':<\/div><div class="SB-rightContent"><b>' + updatedArrayBetslip[0].betslipID + '<\/b> <\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + GetLocalizedPlacebetReceiptMessages("betReceiptPlacedOnLabel") + ':<\/div><div class="SB-rightContent"><b id="getPlacedOnDate"><\/b><\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + gettotalOddsLabelName + ':<\/div><div class="SB-rightContent"> <b>' + Number(getBetReceiptTotalOdds).toFixed(2) + '<\/b> <\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent">' + getbetReceiptTotalStakeLabel + ':<\/div><div class="SB-rightContent"><b>' + CurrencyCode + " " + Number(getOriginalStakeValue).toFixed(2) + "<\/b><\/div><\/div>" + (IsExciseDutyExists === !0 ? '<div class="SB-contentBlock"><div class="SB-leftContent">' + getexciseDutyLabelName + ':<\/div><div class="SB-rightContent"><b>' + CurrencyCode + " " + Number(getExciseValue).toFixed(2) + "<\/b><\/div><\/div>" : "") + "" + (IsWHTExists === !0 ? '<div class="SB-contentBlock"><div class="SB-leftContent">' + getwhtLabelName + ':<\/div><div class="SB-rightContent"><b>' + CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "<\/b><\/div><\/div>" : "") + '<div class="SB-contentBlock"><div class="SB-leftContent">Bonus: <\/div><div class="SB-rightContent"><b>' + bonusamountReciept.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '<\/b><\/div><\/div><div class="SB-contentBlock"><div class="SB-leftContent SB-txtHighlight">' + getbetReceiptWinLabel + ':<\/div><div class="SB-rightContent SB-txtHighlight"><b>' + CurrencyCode + " " + getPotentialWinningAmount.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '<\/b><\/div><\/div><\/div><\/div><div class="SB-betReceipt-edge SB-bottom"><\/div><\/div><\/div><div class="SB-betReceipt-btnClose"><button class="btn SB-btnSecondary SB-btnMedium active SB-btnClose" onclick="closeBetReceipt()">' + GetLocalizedPlacebetReceiptMessages("continueBettingMsg") + "<\/button><\/div><\/div><\/div><\/div><\/div>");
    h.innerHTML = n;
    getCurrentDateTime();
    l !== null ? (f = document.getElementById("hideLoginButtonInBetslip"),
    f !== null && (f.innerHTML = "")) : (e = document.getElementById("betslipUserBalance"),
    o = document.getElementById("betslipDepositButton"),
    e !== null && (e.innerHTML = ""),
    o !== null && (o.innerHTML = ""));
    c = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    t = document.getElementsByClassName("SB-myBetReceipt-dateandtime");
    for (let n = 0; n < t.length; n++)
        if (t[n].attributes["date-mybetreceipttime"]) {
            let r = t[n].attributes["date-mybetreceipttime"].value;
            var a = r + " UTC"
              , i = new Date(a)
              , v = new Date;
            getEXactYear = i.getFullYear();
            getExactDate = addZero(i.getDate());
            getExactTime = addZero(i.getHours()) + ":" + addZero(i.getMinutes());
            t[n].innerHTML = "" + getExactDate + " " + c[i.getMonth()] + "  at " + getExactTime + ""
        }
    s = readCookie("keepbetscheck");
    (s === !0 || s === "true") && (reOpenBetslipSelctions(),
    betslipHighlight())
}
function reOpenBetslipSelctions() {
    betSlipData = updatedArrayBetslip;
    localStorage.setItem("betSlipData", JSON.stringify(betSlipData));
    var n = document.getElementById("getBetsCountDisplay");
    n != null && (n.innerHTML = betSlipData.length);
    createCookie("userStakeValue", "", -1)
}
function getCurrentDateTime() {
    var i = document.getElementById("getPlacedOnDate"), n = new Date, e = n.getFullYear(), u = addZero(n.getDate()), f = addZero(n.getHours()) + ":" + addZero(n.getMinutes()), r = "" + u + " " + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][n.getMonth()] + "  at " + f + "", t;
    if (i !== null && (i.innerHTML = r),
    t = document.querySelectorAll("[id^=getPlacedOnDate_]"),
    t !== null)
        for (let n = 0; n < t.length; n++)
            t[n].innerHTML = r
}
function closeBetReceipt() {
    var r = readCookie("token"), n, t, i;
    updatedArrayBetslip = [];
    betSlipData = [];
    getStakeValue = 0;
    getOriginalStakeValue = 0;
    getExciseValue = 0;
    getReturns = 0;
    getWhtValue = 0;
    getWinningAmount = 0;
    createCookie("userStakeValue", "", -1);
    document.body.classList.remove("SB-rightMenu-opened");
    addBetSlipAccordian();
    r !== null;
    betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    n = document.getElementById("BLM-betSlip-Button");
    betSlipData !== null && betSlipData.length > 0 ? n !== null && n.classList.add("SB-betSlip-active") : n !== null && n.classList.remove("SB-betSlip-active");
    getUserBalance("initial");
    t = document.getElementsByClassName("SB-betBuilder-title");
    (t !== null || t !== undefined) && t.length > 0 && betSlipData.length <= 0 && (i = t[0].attributes["data-bbeventid"].value,
    clearAllBBSelections(i))
}
function removeBet(n) {
    var t, r, i;
    if (isBetBuilder)
        betSlipData = JSON.parse(localStorage.getItem("betSlipData")),
        betSlipData.splice(n, 1),
        localStorage.setItem("betSlipData", JSON.stringify(betSlipData)),
        updateBetslip(n),
        sessionState.setBetSlipList(betSlipData),

        //post json

        isShowPayoutMessage = !1,
        t = document.getElementsByClassName("SB-betBuilder-title"),
        (t !== null || t !== undefined) && (t.length > 0 && betSlipData.length > 0 ? (r = t[0].attributes["data-bbeventid"].value,
        disableAddToBetslip(r)) : t.length > 0 && (r = t[0].attributes["data-bbeventid"].value,
        clearAllBBSelections(r)));
    else {
        isShowPayoutMessage = !1;
        i = n.target != null && n.target !== undefined ? n.target.getAttribute("data-selectionId") : n;
        document.getElementById("highlightBet_" + i) !== null && removeHighlightBets("highlightBet_" + i);
        betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
        for (let n = 0; n < betSlipData.length; n++)
            Number(i) === Number(betSlipData[n].selectionId) && betSlipData.splice(n, 1),
            localStorage.setItem("betSlipData", JSON.stringify(betSlipData));
        updateBetslip(i);
        sessionState.setBetSlipList(betSlipData);
        UpdateSocketConnections()
    }
}
function updateBetslip() {
    var n = betSlipData, t, i, r, u;
    if (n = JSON.parse(localStorage.getItem("betSlipData")),
    betSlipData = n,
    getBetSlip(n),
    t = document.getElementById("getBetsCountDisplay"),
    t != null && (t.innerHTML = n.length),
    betSlipData.length === 0 && (getStakeValue = 0,
    getReturns = 0,
    getWhtValue = 0,
    getWinningAmount = 0,
    getOriginalStakeValue = 0,
    getExciseValue = 0,
    totalBonusValue = 0,
    bonusAmountValue = 0,
    getWhtValueId = document.getElementById("bindWhtValue"),
    getWhtValueId !== null && (getWhtValueId.innerHTML = CurrencyCode + " 0"),
    getWinningValueId = document.getElementById("bindWinningValue"),
    getWinningValueId !== null && (getWinningValueId.innerHTML = CurrencyCode + " 0"),
    getExciseValueId = document.getElementById("bindExciseValue"),
    getExciseValueId !== null && (getExciseValueId.innerHTML = CurrencyCode + " 0"),
    getDeductedStakeValue = document.getElementById("bindDeductedStakeValue"),
    getDeductedStakeValue !== null && (getDeductedStakeValue.innerHTML = CurrencyCode + " 0"),
    getBonusAmountId = document.getElementById("bindBonusValue"),
    getBonusAmountId != null && (getBonusAmountId.innerHTML = CurrencyCode + " 0"),
    i = document.getElementById("bindActualStakeValue"),
    i !== null && (i.innerHTML = CurrencyCode + " 0"),
    createCookie("userStakeValue", "", -1),
    r = document.getElementById("BLM-betSlip-Button"),
    r !== null && r.classList.remove("SB-betSlip-active")),
    betSlipData.length > 0) {
        u = readCookie("userStakeValue");
        u !== 0 && (getStakeValue = u);
        getBetSlipOdds = 1;
        for (let n = 0; n < betSlipData.length; n++)
            getBetSlipOdds = getBetSlipOdds * betSlipData[n].odds;
        getBetSlipOdds = getBetSlipOdds.toFixed(2);
        isBetBuilder ? betBuilderStakeCalculation() : numberValidationMobile();
        createCookie("userStakeValue", getStakeValue, 1)
    }
}
function clearBets() {
    var i, r, u, n, t;
    betSlipData = JSON.parse(localStorage.getItem("betSlipData"));
    for (let n = 0; n < betSlipData.length; n++)
        document.getElementById("highlightBet_" + betSlipData[n].selectionId) !== null && removeHighlightBets("highlightBet_" + betSlipData[n].selectionId);
    betSlipData = [];
    createCookie("userStakeValue", "", -1);
    i = document.getElementById("stakeValue");
    i !== null && (i.value = "");
    getStakeValue = 0;
    getOriginalStakeValue = 0;
    getExciseValue = 0;
    getReturns = 0;
    getWhtValue = 0;
    getWinningAmount = 0;
    localStorage.setItem("betSlipData", JSON.stringify(betSlipData));
    r = document.getElementById("getBetsCountDisplay");
    r != null && (r.innerHTML = betSlipData.length);
    getBetSlip(betSlipData);
    u = document.getElementById("BLM-betSlip-Button");
    u != null && u.classList.remove("SB-betSlip-active");
    isShowPayoutMessage = !1;
    n = document.getElementsByClassName("SB-betBuilder-title");
    (n !== null || n !== undefined) && n.length > 0 && (t = n[0].attributes["data-bbeventid"].value,
    t !== null && t !== "" && clearAllBBSelections(t));
    UpdateSocketConnections()
}
function highlightFooterTab(n, t) {
    var i = document.querySelectorAll(".footerItemsDisplayListWithLogin li"), r;
    t === null || t === "Home" ? (removeActiveClass(i),
    addActiveClass(i, t)) : t === "In-play" ? (removeActiveClass(i),
    addActiveClass(i, t)) : t === "My Bets" ? (removeActiveClass(i),
    addActiveClass(i, t)) : t === "A-Z Sports" ? (r = document.querySelectorAll("li.active"),
    removeActiveClass(r),
    removeActiveClass(i),
    addActiveClass(i, t),
    getAtoZSports()) : t === "Promotions" ? (removeActiveClass(i),
    addActiveClass(i, t),
    location.href = "/Promotions") : t === "My Account" && (removeActiveClass(i),
    addActiveClass(i, t),
    loadSideMenu(!1))
}
function fnactiveCSS(n, t) {
    for (var i = 0; i < n.length; i++)
        i === t ? n[i].classList.add("active") : n[i].classList.remove("active")
}
function removeActiveClass(n) {
    for (var t = 0; t < n.length; t++)
        n[t].classList.remove("active")
}
function addActiveClass(n, t) {
    for (var i, r = 0; r < n.length; r++)
        if (i = n[r].children[0],
        i.attributes.hasOwnProperty("href") && (hrefValue = i.attributes.href.value,
        i = hrefValue.includes("void") ? i.innerText : hrefValue.replace("..", "")),
        i.toString().toLowerCase().replace("/", "") === t.toString().toLowerCase().replace("/", "")) {
            n[r].classList.add("active");
            break
        }
}
function headerTabsfilterCSS(n) {
    var i = document.querySelectorAll(".topHeaderAddActiveClass li")
      , t = n.target.innerText;
    t === null || t === "Home" ? fnactiveCSS(i, 0) : t === "Jackpot" ? fnactiveCSS(i, 1) : t === "PigaPena" ? fnactiveCSS(i, 2) : t === "Virtual League" ? fnactiveCSS(i, 3) : t === "Promotions" ? fnactiveCSS(i, 4) : t === "Games" && fnactiveCSS(i, 5)
}
function highlightFooterTabWoLogin(n, t) {
    var i = document.querySelectorAll(".footerItemsDisplayListWithOutLogin li"), r;
    t === null || t === "Home" ? (removeActiveClass(i),
    addActiveClass(i, t)) : t === "In-play" ? (removeActiveClass(i),
    addActiveClass(i, t)) : t === "A-Z Sports" ? (r = document.querySelectorAll("li.active"),
    removeActiveClass(r),
    removeActiveClass(i),
    addActiveClass(i, t),
    getAtoZSports()) : t === "Promotions" ? (removeActiveClass(i),
    addActiveClass(i, t),
    location.href = "/Promotions") : t === "My Account" && (removeActiveClass(i),
    addActiveClass(i, t),
    loadSideMenu(!1))
}
function goBackToPreviousPage() {
    window.history.go(-1)
}
function removeHighlightBets(n) {
    for (var i = document.querySelectorAll("[id = " + n + "]"), t = 0; t < i.length; t++)
        i[t].classList.remove("active")
}
function highlightBets(n) {
    var i, t;
    if (n !== null && n !== "")
        for (i = document.querySelectorAll("[id = " + n + "]"),
        t = 0; t < i.length; t++)
            i[t].classList.add("active")
}
function getBonusReturns() {
    var f, r, t, u;
    if (!isShowOddsThresholdMessage && (betSlipData = JSON.parse(localStorage.getItem("betSlipData")),
    betSlipData.length > Number(minBetCount) - 1)) {
        var n = getActualValue * getBetSlipOdds
          , e = betSlipData.length > maxPercentage ? maxPercentage : Number(bonusPercentageValue)
          , i = multiBetBonusobj[e];
        i > 0 && (f = Number(i) / 100,
        r = Number(n) === Number(placebetMaxReturnsValue) ? n : n - getActualValue,
        bonusAmountValue = n * f,
        getBonusPercentValue = i,
        isBonusExists = !0,
        t = r + bonusAmountValue,
        r = t >= Number(placebetMaxReturnsValue) ? placebetMaxReturnsValue : t,
        getTotalReturnsCalculation(t),
        u = document.getElementById("bindBonusValue"),
        u != null && (u.innerHTML = CurrencyCode + " " + Number(bonusAmountValue).toFixed(2)))
    }
}
function getTotalReturnsCalculation(n) {
    var t = Number(n), i, r;
    IsWHTExists ? (i = getActualValue * getBetSlipOdds,
    i = i + bonusAmountValue,
    getWhtValue = t * (WHTValue / 100),

    // bet calculation here betslipdata setitem stake invalidBonusMessage
    getWinningAmount = getActualValue * getBetSlipOdds + bonusAmountValue,
    r = document.getElementById("bindWhtValue"),
    r !== null && (r.innerHTML = CurrencyCode + " " + getWhtValue.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","))) : getWinningAmount = t >= Number(placebetMaxReturnsValue) ? placebetMaxReturnsValue : t + Number(getOriginalStakeValue)
}
function facebookPixelTrackerPlaceBet(n, t, i) {
    if (globalConfig.facebookPixelID !== null && globalConfig.facebookPixelID.trim() !== "") {
        thirdPartyLib.faceBookPixelLoader();
        var r = i ? "MultiBet" : "SingleBet"
          , u = {
            stakeAmount: n,
            currencyCode: t
        };
        thirdPartyLib.faceBookPixelTracker(r, u)
    }
}
function showHideBalancePopup() {
    var n = document.getElementById("balancePopup");
    n.classList.contains("active") ? n.classList.remove("active") : n.classList.add("active")
}

function getUserBets() {
    var n = ""
      , i = readCookie("token")
      , r = readCookie("userNumber")
      , t = new XMLHttpRequest
      , u = globalMyBetsUrl
      , f = {
        limit: openBetsLimit,
        logMob: Number(r),
        offset: offset,
        settled: !1,
        trk: trk,
        twToken: i
    };
    t.open("POST", u, !0);
    t.setRequestHeader("Content-type", "application/json");
    t.onreadystatechange = function() {
        var o = 0, l = document.getElementById("betslipDisplay"), p, w, i, s, b, k, a, u, v, h, nt, c, y, f, e, d, g;
        if (t.readyState === 4 && t.status === 200) {
            let r = JSON.parse(t.responseText);
            if (r.hasOwnProperty("error") === !1) {
                filteredOpenBets = r.bet;
                let t = [];
                if (t.push(filteredOpenBets.slice(0, showOpenBets)),
                p = GetLocalizedMyBetsMessages("textStake"),
                w = GetLocalizedMyBetsMessages("textWin"),
                n += '<div class="SB-rightMenu-main-content" ><div class="SB-betSlip-container"><div class="SB-betSlip-header"><div class="SB-betslipMyBets-tabs"><ul><li id="betslip" onclick="betslipMybetsTabClick(event)">Betslip <span class="SB-betsCount">' + betSlipData.length + '<\/span><\/li><li class="active" id="mybets" onclick="betslipMybetsTabClick(event)">My Bets <span class="SB-betsCount active">{mybetsCount}<\/span><\/li><\/ul><\/div><div class="SB-betSlip-closeButton" id="BLM-betSlip-closeButton" onclick="hideOpenedBetSlip()"><img src="/static/images/betslip-close.svg" /><\/div><\/div><div class="SB-myBets-content" style=""><div class="SB-cashOut-toggle-container" ><div class="SB-toggleSwitch"><input type="checkbox" id="cashoutToggle"><label for="cashoutToggle" onclick="getToggledData()"><\/label><span class="SB-label">Show only cash out bets<\/span><\/div><\/div><div class="SB-myBets-container">',
                t[0].length > 0) {
                    for (let r = 0; r < t[0].length; r++) {
                        i = [];
                        s = 1;
                        for (let n = 0; n < t[0][r].betPart.length; n++)
                            t[0][r].betPart[n].result === "N/A" && i.push(t[0][r].betPart[n]);
                        if (i != null && i.length != 0) {
                            if (n += '<div class="SB-betBox SB-myBet SB-accordion" id="getBetAccordianId_' + r + '"><div class="SB-betBox-header SB-accordion-header SB-arrowBefore" onclick="myBetsCollapseAccordian(' + r + ')"><div class="SB-contentBlock"><div class="SB-leftContent"><div class="SB-betType">' + t[0][r].betTypeName + '<\/div><div class="SB-betID">ID: ' + t[0][r].id + '<\/div><\/div><div class="SB-rightContent"> <div class="SB-rightContent" data-mybetsdate="' + t[0][r].placedOn + '"><\/div><\/div><\/div><\/div><div class="SB-accordion-content"><div class="SB-betBox-content">',
                            o++,
                            t[0][r].betTypeName === "Create A Bet") {
                                n += '<div class="SB-betBox-betItem"><div class="SB-bet-details">';
                                for (let t = 0; t < i.length; t++)
                                    n += '<div class="SB-bet-outcome">' + i[t].selection + '<\/div><div class="SB-bet-market">' + i[t].market + "<\/div>",
                                    b = i[t].name,
                                    k = i[t].scheduledStartOn;
                                n += '<div class="SB-bet-fixture">' + b + ' @ <span class="SB-myBets-dateandtime" date-mybetstime="' + k + '"><span><\/div><\/div><div class="SB-bet-odds">' + t[0][r].indicativeDecimalPrice.toFixed(3).slice(0, -1) + "<\/div><\/div>"
                            } else
                                for (let t = 0; t < i.length; t++)
                                    s = s * i[t].price.toFixed(2),
                                    n += '<div class="SB-betBox-betItem"><div class="SB-bet-details"><div class="SB-bet-outcome">' + i[t].selection + '<\/div><div class="SB-bet-market">' + i[t].market + '<\/div><div class="SB-bet-fixture">' + i[t].name + ' @ <span class="SB-myBets-dateandtime" date-mybetstime="' + i[t].scheduledStartOn + '"><span><\/div><\/div><div class="SB-bet-odds">' + i[t].price.toFixed(3).slice(0, -1) + "<\/div><\/div>";
                            a = encodeURIComponent(JSON.stringify(t[0][r].betPart));
                            u = 0;
                            Number(t[0][r].maxPayout) > 0 && t[0][r].betPart.length === i.length && t[0][r].betTypeName !== "Create A Bet" && i.length > 4 && (u = (Number(t[0][r].maxPayout) - Number(s * t[0][r].totalStake)).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                            u <= 0 && (u = 0));
                            v = "";
                            t[0][r].betTypeName !== "Create A Bet" && (v = '<div class="SB-contentBlock"><div class="SB-leftContent">Bonus:<b> ' + CurrencyCode + " " + u + "<\/b><\/div><\/div>");
                            h = "";
                            h += t[0][r].betTypeName === "Create A Bet" ? '<button class="btn SB-btnPrimary SB-btnMedium SB-btnCashout active SB-btnDisabled" onclick="RebetCouponCheck(\'' + a + "')\">Rebet<\/button>" : '<button class="btn SB-btnPrimary SB-btnMedium SB-btnCashout active" onclick="RebetCouponCheck(\'' + a + "')\">Rebet<\/button>";
                            n += '<\/div><div class="SB-betBox-stakeRetuns"><div class="SB-contentBlock"><div class="SB-leftContent">' + p + ":<b> " + CurrencyCode + " " + t[0][r].totalStake.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '<\/b><\/div><div class="SB-rightContent">' + w + ":<b> " + CurrencyCode + " " + t[0][r].maxPayout.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "<\/b><\/div><\/div>" + v + '<\/div><div class="SB-betBox-rebet-container">' + h + "<\/div><\/div><\/div>"
                        }
                    }
                    "<\/div>"
                } else
                    c = GetLocalizedMyBetsMessages("nobetserrMsg"),
                    n += '<div class="SB-content"><div class="SB-msgBox"><div class="SB-msgBox-container">' + c + "<\/div><\/div><\/div><\/div><\/div><\/div>";
                n = n.replace("{mybetsCount}", o);
                l.innerHTML = n
            } else
                nt = GetLocalizedMyBetsMessages("nodataerrMsg"),
                n += '<div class="SB-content"><div class="SB-msgBox"><div class="SB-msgBox-container">' + r.message + " Code:" + r.statusCode + "<\/div><\/div><\/div><\/div><\/div><\/div>",
                n = n.replace("{mybetsCount}", o),
                l.innerHTML = n
        } else
            t.status !== 200 && (c = GetLocalizedMyBetsMessages("nodataerrMsg"),
            n += '<div class="SB-rightMenu-main-content" ><div class="SB-betSlip-container"><div class="SB-betSlip-header"><div class="SB-betslipMyBets-tabs"><ul><li id="betslip" onclick="betslipMybetsTabClick(event)">Betslip <span class="SB-betsCount">' + betSlipData.length + '<\/span><\/li><li class="active" id="mybets" onclick="betslipMybetsTabClick(event)">My Bets <span class="SB-betsCount active">{mybetsCount}<\/span><\/li><\/ul><\/div><div class="SB-betSlip-closeButton" id="BLM-betSlip-closeButton" onclick="hideOpenedBetSlip()"><img src="/static/images/betslip-close.svg" /><\/div><\/div><div class="SB-myBets-content" style=""><div class="SB-cashOut-toggle-container" ><div class="SB-toggleSwitch"><input type="checkbox" id="cashoutToggle"><label for="cashoutToggle" onclick="getToggledData()"><\/label><span class="SB-label">Show only cash out bets<\/span><\/div><\/div><div class="SB-myBets-container">',
            n += '<div class="SB-content"><div class="SB-msgBox"><div class="SB-msgBox-container">' + c + "<\/div><\/div><\/div><\/div><\/div><\/div>",
            n = n.replace("{mybetsCount}", o),
            l.innerHTML = n);
        y = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        f = document.getElementsByClassName("SB-rightContent");
        for (let n = 0; n < f.length; n++)
            if (f[n].attributes["data-mybetsdate"]) {
                let t = f[n].attributes["data-mybetsdate"].value;
                var tt = new Date(Number(t))
                  , it = tt
                  , r = new Date(it)
                  , rt = new Date;
                getEXactYear = r.getFullYear();
                getExactDate = addZero(r.getDate());
                getExactTime = addZero(r.getHours()) + ":" + addZero(r.getMinutes());
                f[n].innerHTML = "" + getExactDate + " " + y[r.getMonth()] + "  at " + getExactTime + ""
            }
        e = document.getElementsByClassName("SB-myBets-dateandtime");
        for (let n = 0; n < e.length; n++)
            if (e[n].attributes["date-mybetstime"]) {
                let t = e[n].attributes["date-mybetstime"].value;
                d = new Date(Number(t));
                g = d;
                r = new Date(g);
                rt = new Date;
                getEXactYear = r.getFullYear();
                getExactDate = addZero(r.getDate());
                getExactTime = addZero(r.getHours()) + ":" + addZero(r.getMinutes());
                e[n].innerHTML = "" + getExactDate + " " + y[r.getMonth()] + "  at " + getExactTime + ""
            }
    }
    ;
    t.send(JSON.stringify(f))
}
function getMbCashoutData() {
    var t = ""
      , i = readCookie("token")
      , r = readCookie("userNumber")
      , n = new XMLHttpRequest
      , u = globalCashOutUrl
      , f = {
        trk: trk,
        limit: myBetslimit,
        offset: offset,
        countrycode: Countrycode,
        twToken: i,
        logMob: Number(r)
    };
    n.open("POST", u, !0);
    n.setRequestHeader("Content-type", "application/json");
    n.onreadystatechange = function() {
        var s, h, e, u, f, c, l, o;
        if (n.readyState === 4 && n.status === 200) {
            let i = JSON.parse(n.responseText);
            if (i.hasOwnProperty("error") === !1) {
                cashOutBets = i.bet;
                var r = document.getElementById("betslipDisplay")
                  , a = GetLocalizedMyBetsMessages("textStake")
                  , v = GetLocalizedMyBetsMessages("textWin")
                  , y = GetLocalizedMyBetsMessages("textCashout")
                  , k = GetLocalizedMyBetsMessages("displaySuspended");
                if (t += '<div class="SB-rightMenu-main-content" ><div class="SB-betSlip-container"><div class="SB-betSlip-header"><div class="SB-betslipMyBets-tabs"><ul><li id="betslip" onclick="betslipMybetsTabClick(event)">Betslip <span class="SB-betsCount">' + betSlipData.length + '<\/span><\/li><li class="active" id="mybets" onclick="betslipMybetsTabClick(event)">My Bets <span class="SB-betsCount active">' + i.pageInfo.total + '<\/span><\/li><\/ul><\/div><div class="SB-betSlip-closeButton" id="BLM-betSlip-closeButton" onclick="hideOpenedBetSlip()"><img src="/static/images/betslip-close.svg" /><\/div><\/div><div class="SB-myBets-content" style=""><div class="SB-cashOut-toggle-container" ><div class="SB-toggleSwitch"><input type="checkbox" id="cashoutToggle"><label for="cashoutToggle" onclick="getToggledData()"><\/label><span class="SB-label">Show only cash out bets<\/span><\/div><\/div><div class="SB-myBets-container">',
                cashOutBets.length > 0) {
                    for (let n = 0; n < cashOutBets.length; n++) {
                        t += '<div class="SB-betBox SB-myBet SB-accordion" id="getBetAccordianId_' + n + '"><div class="SB-betBox-header SB-accordion-header SB-arrowBefore" onclick="myBetsCollapseAccordian(' + n + ')"><div class="SB-contentBlock"><div class="SB-leftContent"><div class="SB-betType">' + cashOutBets[n].betTypeName + '<\/div><div class="SB-betID">ID: ' + cashOutBets[n].id + '<\/div><\/div><div class="SB-rightContent"> <div class="SB-rightContent" data-cashoutbetsdate="' + cashOutBets[n].placedOn + '"><\/div><\/div><\/div><\/div><div class="SB-accordion-content"><div class="SB-betBox-content">';
                        for (let i = 0; i < cashOutBets[n].betPart.length; i++)
                            t += '<div class="SB-betBox-betItem"><div class="SB-bet-details"><div class="SB-bet-outcome">' + cashOutBets[n].betPart[i].selection + '<\/div><div class="SB-bet-market">' + cashOutBets[n].betPart[i].market + '<\/div><div class="SB-bet-fixture">' + cashOutBets[n].betPart[i].name + ' @ <span class="SB-cashoutBets-dateandtime" date-cashoutbetstime="' + cashOutBets[n].betPart[i].scheduledStartOn + '"><span><\/div><\/div><div class="SB-bet-odds">' + cashOutBets[n].betPart[i].price.toFixed(3).slice(0, -1) + "<\/div><\/div>";
                        betpartarray = encodeURIComponent(JSON.stringify(cashOutBets[n].betPart));
                        t += '<\/div><div class="SB-betBox-stakeRetuns"><div class="SB-contentBlock"><div class="SB-leftContent">' + a + ":<b> " + CurrencyCode + " " + cashOutBets[n].totalStake.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "<\/b><\/div>" + (cashOutBets[n].cashOut.available === !0 ? '<div class="SB-rightContent">' + v + ": <b> " + CurrencyCode + " " + cashOutBets[n].cashOut.returns.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "<\/b><\/div>" : '<div class="SB-rightContent"><\/div>') + '<\/div><\/div><div class="SB-betBox-betFeatures-container"><div class="SB-cashout-container" id="cashout_' + cashOutBets[n].id + '">' + (cashOutBets[n].cashOut.available === !0 ? '<button class="btn SB-btnSecondary SB-btnMedium SB-btnCashout active" id="disableCashout_' + cashOutBets[n].id + '" onclick="requestMbCashout(' + cashOutBets[n].id + "," + cashOutBets[n].cashOut.returns + ')"><span class="SB-btnTxt">' + y + " " + CurrencyCode + " " + cashOutBets[n].cashOut.returns + "<\/span><\/button><\/div >" : "") + '<div class="SB-betBox-rebet-container"><button class="btn SB-btnPrimary SB-btnMedium SB-btnCashout active" onclick="RebetCouponCheck(\'' + betpartarray + "')\">Rebet<\/button><\/div><\/div><\/div><\/div>"
                    }
                    r.innerHTML = t
                } else
                    s = GetLocalizedMyBetsMessages("noCashoutserrMsg"),
                    t += '<div class="SB-content"><div class="SB-msgBox"><div class="SB-msgBox-container">' + s + "<\/div><\/div><\/div><\/div><\/div><\/div>",
                    r.innerHTML = t
            } else
                r = document.getElementById("betslipDisplay"),
                r.innerHTML = '<div class="SB-content"><div class="SB-msgBox"><div class="SB-msgBox-container">' + i.message + " Code:" + i.statusCode + "<\/div><\/div><\/div><\/div><\/div><\/div>"
        } else
            n.status !== 200 && (r = document.getElementById("betslipDisplay"),
            h = GetLocalizedMyBetsMessages("nodataerrMsg"),
            r.innerHTML = '<div class="SB-content"><div class="SB-msgBox"><div class="SB-msgBox-container">' + h + "<\/div><\/div><\/div><\/div><\/div><\/div>");
        e = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        u = document.getElementsByClassName("SB-rightContent");
        for (let n = 0; n < u.length; n++)
            if (u[n].attributes["data-cashoutbetsdate"]) {
                let t = u[n].attributes["data-cashoutbetsdate"].value;
                var p = new Date(Number(t))
                  , w = p
                  , i = new Date(w)
                  , b = new Date;
                getEXactYear = i.getFullYear();
                getExactDate = addZero(i.getDate());
                getExactTime = addZero(i.getHours()) + ":" + addZero(i.getMinutes());
                u[n].innerHTML = "" + getExactDate + " " + e[i.getMonth()] + "  at " + getExactTime + ""
            }
        f = document.getElementsByClassName("SB-cashoutBets-dateandtime");
        for (let n = 0; n < f.length; n++)
            if (f[n].attributes["date-cashoutbetstime"]) {
                let t = f[n].attributes["date-cashoutbetstime"].value;
                c = new Date(Number(t));
                l = c;
                i = new Date(l);
                b = new Date;
                getEXactYear = i.getFullYear();
                getExactDate = addZero(i.getDate());
                getExactTime = addZero(i.getHours()) + ":" + addZero(i.getMinutes());
                f[n].innerHTML = "" + getExactDate + " " + e[i.getMonth()] + "  at " + getExactTime + ""
            }
        o = document.getElementById("cashoutToggle");
        o && (o.checked = !0)
    }
    ;
    n.send(JSON.stringify(f))
}
function RebetCouponCheck(n) {
    var t = JSON.parse(decodeURIComponent(n)), f, r;
    if (t !== null && t.length > 0)
        for (let n = 0; n < t.length; n++) {
            var u = t[n].name.split(" v ")
              , e = u[0]
              , o = u[1];
            let c = t[n].scheduledStartOn;
            var s = new Date(Number(c))
              , h = s
              , i = new Date(h);
            getEXactYear = i.getUTCFullYear();
            getExactDate = addZero(i.getUTCDate());
            getExactMonth = addZero(i.getUTCMonth() + 1);
            getExactTime = addZero(i.getUTCHours()) + ":" + addZero(i.getUTCMinutes());
            f = getExactMonth + "/" + getExactDate + "/" + getEXactYear + "_" + getExactTime + "";
            r = {
                homeTeam: e,
                awayTeam: o,
                eventDate: f,
                eventId: t[n].eventId,
                eventName: t[n].name,
                isLive: t[n].inPlay.toString(),
                marketId: t[n].marketId,
                marketName: t[n].market,
                selectionId: t[n].selectionId,
                outcomeName: t[n].selection,
                odds: t[n].price,
                priceId: ""
            };
            t[n].selectionId !== null && t[n].selectionId !== undefined && t[n].selectionId !== "" ? addBetsToBetSlip(r, t[n].selectionId) : addBetsToBetSlip(r, null)
        }
}
function betslipMybetsTabClick(n) {
    var t = n.currentTarget, i = readCookie("token"), r, u;
    t != null && (r = t.getAttribute("id"),
    r == "betslip" ? (u = JSON.parse(localStorage.getItem("betSlipData")),
    getBetSlip(u)) : i != null && i != "" && getUserBets())
}
function getToggledData() {
    var n = document.getElementById("cashoutToggle");
    n != null && n.checked ? getUserBets() : getMbCashoutData()
}
function myBetsCollapseAccordian(n) {
    var t = document.getElementById("getBetAccordianId_" + n);
    t.classList.toggle("collapsed")
}
function requestMbCashout(n, t) {
    var u = readCookie("token"), f = readCookie("userNumber"), i = new XMLHttpRequest, e = globalRequestCashOutUrl, o = {
        betId: n,
        logMob: Number(f),
        trk: trk,
        twToken: u
    }, r;
    i.open("POST", e, !0);
    i.setRequestHeader("Content-type", "application/json");
    r = document.getElementById("disableCashout_" + n + "");
    r.innerHTML = '<div class="SB-loader"><div class="SB-dot-pulse"><span><\/span><span><\/span><span><\/span><\/div><\/div>';
    i.onreadystatechange = function() {
        var u = GetLocalizedMyBetsMessages("textCashout"), e = GetLocalizedMyBetsMessages("textConfirm"), o = GetLocalizedMyBetsMessages("displayCancel"), f;
        if (i.readyState === 4 && i.status === 200) {
            r.innerHTML = '<span class="SB-btnTxt">' + u + " " + CurrencyCode + " " + t + "<\/span>";
            let s = JSON.parse(i.responseText);
            cashoutRequestId = s.cashOutRequest.id;
            f = document.getElementById("cashout_" + n + "");
            f.innerHTML = '<div class="SB-betBox-btnCashout-container"><button class="btn SB-btnDefault SB-btnMedium SB-btnCancel active" onclick="gobackToMbCashOut(' + n + "," + t + ')">' + o + '<\/button><button class="btn SB-btnSecondary SB-btnMedium SB-btnCashout active" id="disableCashoutButton_' + n + '" onclick="confirmMbCashOut(' + cashoutRequestId + "," + n + "," + t + ')">' + e + " " + CurrencyCode + " " + t + "<\/button><\/div>"
        } else
            r.innerHTML = '<span class="SB-btnTxt">' + u + " " + CurrencyCode + " " + t + "<\/span>"
    }
    ;
    i.send(JSON.stringify(o))
}
function gobackToMbCashOut(n, t) {
    var i = document.getElementById("cashout_" + n + "");
    i.innerHTML = '<button class="btn SB-btnSecondary SB-btnMedium SB-btnCashout active" id="disableCashout_' + n + '" onclick = "requestMbCashout(' + n + "," + t + ')" ><span class="SB-btnTxt">Cashout ' + CurrencyCode + " " + t + "<\/span><\/button>"
}
function confirmMbCashOut(n, t, i) {
    var f = readCookie("token"), e = readCookie("userNumber"), r = new XMLHttpRequest, o = globalConfirmCashOutUrl, s = {
        cashOutRequestId: n,
        logMob: Number(e),
        trk: trk,
        twToken: f
    }, u;
    r.open("POST", o, !0);
    r.setRequestHeader("Content-type", "application/json");
    u = document.getElementById("disableCashoutButton_" + t + "");
    u.innerHTML = '<div class="SB-loader"><div class="SB-dot-pulse"><span><\/span><span><\/span><span><\/span><\/div><\/div>';
    r.onreadystatechange = function() {
        var n, f, e;
        if (r.readyState === 4 && r.status === 200) {
            let o = JSON.parse(r.responseText);
            n = GetLocalizedMyBetsMessages("textConfirm");
            u.innerHTML = '<span class="SB-btnTxt">' + n + " " + CurrencyCode + " " + i + "<\/span>";
            f = document.getElementById("cashout_" + t + "");
            o.hasOwnProperty("error") === !1 ? (e = GetLocalizedMyBetsMessages("cashoutSuccessMsg"),
            f.innerHTML = '<div class="SB-betBox-cashout-statusMessage SB-success">' + e + "<\/div>") : f.innerHTML = '<div class="SB-betBox-cashout-statusMessage SB-success">' + o.message + "<\/div>";
            getUserBalance();
            setTimeout(function() {
                getCashOutData()
            }, 3e3)
        } else
            u.innerHTML = '<span class="SB-btnTxt">' + n + " " + CurrencyCode + " " + i + "<\/span>"
    }
    ;
    r.send(JSON.stringify(s))
}
function onDepositClick() {
    window.location.href = "/Deposit"
}
function toggleBetSlipFooter() {
    var n = document.querySelector(".SB-betSlip-footer")
      , t = document.querySelector(".SB-insufficientFunds-deposit-container");
    n != null && t != null && (n.classList.toggle("d-none"),
    t.classList.toggle("d-none"))
}
function closeBookaBet() {
    var n = document.getElementById("BookAbetSection")
      , t = document.getElementById("maskOnBookbet");
    n.classList.add("d-none");
    t.classList.add("d-none")
}
function copybetcode() {
    var n = document.getElementById("bookBetCode")
      , t = document.getElementById("betCodeCopySuccess");
    t.innerHTML = "Bet code copied successfully";
    navigator.clipboard.writeText(n.innerHTML)
}
function getBetCodesFromApi() {
    var t, e, r, i, u, f, o;
    betPlaceObject = [];
    t = [];
    t = JSON.parse(localStorage.getItem("betSlipData"));
    e = readCookie("token");
    r = Countryid + readCookie("userNumber");
    (readCookie("userNumber") === null || readCookie("userNumber") === "") && (r = "");
    i = document.getElementById("stakeValue");
    u = 0;
    i !== null && i !== undefined && (u = i.value);
    f = {
        amount: u,
        selections: "",
        trk: trk,
        msisdn: r
    };
    for (let n = 0; n < t.length; n++)
        betPlaceObject.push(Number(t[n].selectionId));
    if (o = readCookie("balance"),
    t.length > 0) {
        getPlaceBetErrorMessageId = document.getElementById("placeBetErrorMessageDisplay");
        getPlaceBetErrorMessageId.innerHTML = "";
        f.selections = betPlaceObject;
        var n = new XMLHttpRequest
          , s = globalGenerateBookbetCodeUrl
          , h = f;
        n.open("POST", s, !0);
        n.setRequestHeader("Content-type", "application/json");
        n.onreadystatechange = function() {
            var i, r;
            if (n.readyState === 4 && n.status === 200) {
                let h = JSON.parse(n.responseText);
                if (h.message.toLowerCase() === "success") {
                    if (getPlaceBetErrorMessageId = document.getElementById("placeBetErrorMessageDisplay"),
                    getPlaceBetErrorMessageId.innerHTML = "",
                    h.result.betcode !== null || h.result.betcode !== "") {
                        var t = new Date
                          , u = addZero(t.getMonth() + 1).toString() + "/" + addZero(t.getDate()).toString() + "/" + t.getFullYear().toString()
                          , f = addZero(t.getHours()).toString() + ":" + addZero(t.getMinutes()).toString() + ":" + addZero(t.getSeconds()).toString()
                          , e = document.getElementById("BookAbetSection")
                          , o = document.getElementById("maskOnBookbet")
                          , s = document.getElementById("bookBetCodeDate");
                        s.innerHTML = u + " " + f;
                        i = document.getElementById("betCodeCopySuccess");
                        i.innerHTML = "";
                        r = document.getElementById("bookBetCode");
                        e.classList.remove("d-none");
                        o.classList.remove("d-none");
                        r.innerHTML = h.result.betcode
                    }
                } else
                    getPlaceBetErrorMessageId = document.getElementById("placeBetErrorMessageDisplay"),
                    getPlaceBetErrorMessageId.innerHTML = '<div class="SB-content"><div class="SB-msgBox SB-error"><span>' + h.message + "<\/span><\/div><\/div>",
                    getPlaceBetErrorMessageId.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + h.message + "<\/span><\/div><\/div>",
                    getPlaceBetErrorMessageId.scrollIntoView()
            } else
                n.status !== 200 && (getPlaceBetErrorMessageId = document.getElementById("placeBetErrorMessageDisplay"),
                getPlaceBetErrorMessageId.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>Unable to book bet.Sorry,due to an unexpected error,your request cannot be completed.<\/span><\/div><\/div>',
                getPlaceBetErrorMessageId.scrollIntoView())
        }
        ;
        n.send(JSON.stringify(h))
    }
}
function loadBetcodeSelections() {
    var o = readCookie("token"), r = Countryid + readCookie("userNumber"), i = document.getElementById("betcodeSelections"), t = "", u;
    if (betcodefromurl !== null && betcodefromurl !== "" && isBetcodefromurl ? t = betcodefromurl : i !== null && i !== undefined && (t = i.value),
    (readCookie("userNumber") === null || readCookie("userNumber") === "") && (r = ""),
    u = {
        betcode: t.trim().toUpperCase(),
        trk: trk,
        msisdn: r
    },
    t !== null && t !== "") {
        var n = new XMLHttpRequest
          , f = globalLoadBookedBetsUrl
          , e = u;
        n.open("POST", f, !0);
        n.setRequestHeader("Content-type", "application/json");
        n.onreadystatechange = function() {
            var t, r, u;
            if (n.readyState === 4 && n.status === 200) {
                let h = JSON.parse(n.responseText);
                if (h.message.toLowerCase() === "success") {
                    if (getBetselectionsErrorMessageId = document.getElementById("betcodeSelectionsError"),
                    getBetselectionsErrorMessageId !== null && (getBetselectionsErrorMessageId.innerHTML = ""),
                    h.result.selections !== null || h.result.selections !== "") {
                        t = h.result.selections;
                        for (let n = 0; n < t.length; n++) {
                            var f = t[n].matchName.split(" v ")
                              , i = new Date(t[n].kickOffTime)
                              , e = addZero(i.getMonth() + 1).toString() + "/" + addZero(i.getDate()).toString() + "/" + i.getFullYear().toString()
                              , o = addZero(i.getHours()).toString() + ":" + addZero(i.getMinutes()).toString() + ":" + addZero(i.getSeconds()).toString()
                              , s = {
                                homeTeam: f[0],
                                awayTeam: f[1],
                                eventDate: e + "_" + o,
                                eventId: t[n].eventId,
                                eventName: t[n].matchName,
                                isLive: t[n].isLive,
                                marketId: t[n].marketId,
                                marketName: t[n].marketName,
                                selectionId: t[n].selectionId,
                                outcomeName: t[n].outcome,
                                odds: t[n].odds.toFixed(2),
                                priceId: t[n].priceId
                            };
                            addBetsToBetSlip(s, t[n].selectionId)
                        }
                        r = document.getElementById("stakeValue");
                        u = document.getElementById("bindDeductedStakeValue");
                        u !== null && u !== undefined && (u.innerHTML = h.result.amount);
                        r !== null && r !== undefined && (r.value = h.result.amount);
                        numberValidationMobile()
                    }
                } else
                    getBetselectionsErrorMessageId = document.getElementById("betcodeSelectionsError"),
                    getBetselectionsErrorMessageId !== null && (getBetselectionsErrorMessageId.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>' + h.message + "<\/span><\/div><\/div>")
            } else
                n.status !== 200 && (getBetselectionsErrorMessageId = document.getElementById("betcodeSelectionsError"),
                getBetselectionsErrorMessageId !== null && (getBetselectionsErrorMessageId.innerHTML = '<div class="SB-msgBox SB-error"><div class="SB-msgBox-container"><span>Unable to load booked bet selections.Sorry,due to an unexpected error,your request cannot be completed.<\/span><\/div><\/div>'))
        }
        ;
        n.send(JSON.stringify(e))
    } else
        getBetselectionsErrorMessageId = document.getElementById("betcodeSelectionsError"),
        getBetselectionsErrorMessageId !== null && (getBetselectionsErrorMessageId.innerHTML = "Please enter betcode")
}
function useBonusClicked() {
    numberValidationMobile();
    var n = document.getElementById("bonusValue")
      , t = document.getElementById("bonusBalance");
    n != null && n.classList.toggle("d-none")
}
function shareBetMobile() {
    var t = document.getElementById("bookBetCode").innerHTML;
    let n = window.location.hostname;
    (n.match("localhost") || n.includes("localhost")) && (n = globalConfig.CookieDomain);
    isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    isMobile && t !== null && t !== "" ? navigator.share && navigator.share({
        title: document.title,
        text: "Shabiki",
        url: "https://" + n + "/Home/Upcoming/?betcode=" + t
    }).then(()=>{
        console.log("Thanks for sharing!")
    }
    ).catch(console.error) : (url = "https://" + n + "/Home/Upcoming/?betcode=" + t,
    navigator.clipboard.writeText(url))
}
function shareBetDesktop(n) {
    var r = document.getElementById("bookBetCode").innerHTML, t;
    let i = window.location.hostname;
    (i.match("localhost") || i.includes("localhost")) && (i = globalConfig.CookieDomain);
    t = "https://" + i + "/Home/Upcoming/?betcode=" + r;
    navigator.clipboard.writeText(t);
    n.toLowerCase() === "facebook" ? window.open("https://facebook.com/sharer.php?u=" + t, "_blank") : n === "whatsapp" ? window.open("https://web.whatsapp.com/send?text=" + t, "_blank") : n.toLowerCase() === "twitter" ? window.open("https://twitter.com/intent/tweet?url=" + t, "_blank") : n.toLowerCase() === "telegram" && window.open("https://telegram.me/share/url?url=" + t, "_blank")
}
function copySharebetURL() {
    var i = document.getElementById("bookBetCode").innerHTML, t;
    let n = window.location.hostname;
    (n.match("localhost") || n.includes("localhost")) && (n = globalConfig.CookieDomain);
    url = "https://" + n + "/Home/Upcoming/?betcode=" + i;
    navigator.clipboard.writeText(url);
    t = document.getElementById("sharebetURLCopySuccess");
    t.innerHTML = "URL copied successfully";
    setTimeout(function() {
        t.innerHTML = ""
    }, 1e4)
}
function placebetEnablebutton() {
    var n = document.getElementById("disablePlaceBetButton");
    n.disabled = !1;
    n.innerHTML = '<span class="SB-btnTxt">' + getplaceBetLabelName + "<\/span>"
}
var storeData, userPassword, getBetSlipOdds = 1, getStakeValue = 0, getReturns = 0, getStakeTaxValue = 0, getActualValue = 0, getOriginalStakeValue = 0, getExciseValue = 0, oddsChangedArray = [], betSlipData, hideBetSlip = !1, freeBetDetails = [], updatedArrayBetslip = [], betPlaceObject = [], isUseBonusChecked = !1, limit = 1, offset = 0, getWhtValue = 0, getWinningAmount = 0, getPotentialWinningAmount = 0, getBetReceiptTotalOdds = 1, isShowPayoutMessage = !1, IsWHTExists = !0, IsExciseDutyExists = !0, totalBonusValue = 0, bonusCalulationValue = 0, bonusAmountValue = 0, isBonusExists = !1, getBonusPercentValue = 0, bonusReturns = 0, isShowOddsThresholdMessage = !1, isOddsInvalid = !1, bonusBetCount = 1, validBetcount = 0, invalidBetcount = 0, bonusPercentageValue = 0, bonusamountReciept = "0", openBetsLimit = 10, showOpenBets = 10, myBetslimit = 1e5, getbetslipLabelName = GetLocalizedPlacebetMessages("betslipLabelName"), getbtnDepositName = GetLocalizedPlacebetMessages("btnDepositName"), getbtnLoginName = GetLocalizedPlacebetMessages("btnLoginName"), getacceptOddsLabelName = GetLocalizedPlacebetMessages("acceptOddsLabelName"), gettotalOddsLabelName = GetLocalizedPlacebetMessages("totalOddsLabelName"), getStakeLabelName = GetLocalizedPlacebetMessages("StakeLabelName"), getactualStakeLabelName = GetLocalizedPlacebetMessages("actualtStakeLabelName"), getexciseDutyLabelName = GetLocalizedPlacebetMessages("exciseDutyLabelName"), getwhtLabelName = GetLocalizedPlacebetMessages("whtLabelName"), getplaceBetLabelName = GetLocalizedPlacebetMessages("placeBetLabelName"), getplacebetAPIErrorMsg = GetLocalizedPlacebetMessages("placebetAPIErrorMsg"), getbetReceiptTotalStakeLabel = GetLocalizedPlacebetReceiptMessages("betReceiptTotalStakeLabel"), getbetReceiptWinLabel = GetLocalizedPlacebetReceiptMessages("betReceiptWinLabel"), getBonusAmountLabelName = GetLocalizedPlacebetMessages("bonusLabelName"), getBetslipOddsThresholdMsg = GetLocalizedPlacebetMessages("betslipOddsThresholdMsg"), txtfreebetHtml = GetLocalizedPlacebetMessages("freebetName"), isBetBuilder = !1, betcodefromurl = "", isBetcodefromurl = !1, getBalanceInterval, isMobileclick, homeContent, searchTextfromurl, searchtextctrl, bonusAmount;
const urlParams = new URLSearchParams(window.location.search);
window.onpopstate = function(n) {
    n.state !== null ? n.state.view == "sports" ? getInplay(n.state.sportname, null, !0) : n.state.view == "leagues" ? getleagueInfoFromHistory(n.state.leagueId, n.state.leaguename, n.state.countryname, n.state.marketname) : n.state.view == "livenow" && getHomeInplay(n.state.sportname, !0) : location.href = "/"
}
;
urlParams.has("betcode") ? (betcodefromurl = urlParams.get("betcode"),
isBetcodefromurl = !0,
clearBets(),
loadBetcodeSelections(),
isMobileclick = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent),
isMobileclick && (readCookie("token") !== null ? highlightFooterTab(null, "My Bets") : highlightFooterTabWoLogin(null, "My Bets"),
openHiddenBetSlip())) : urlParams.has("q") && (homeContent = document.querySelector(".SB-homeTabs-content"),
homeContent != null && homeContent.classList.add("d-none"),
searchTextfromurl = urlParams.get("q"),
searchtextctrl = document.getElementById("txtSearch"),
searchtextctrl !== null && searchtextctrl !== undefined && (searchtextctrl.value = searchTextfromurl),
getSearchEvent(searchTextfromurl));
updateUIOddsInBetSlip();
bonusAmount = 0;
window.addEventListener("load", function() {
    var r = document.getElementById("BLM-betSlip-Button"), y = window.location.href, p = y.toLowerCase().indexOf("btag"), o, s, u, h, c, t, i, l, n, e, a, v;
    if (p > -1 && (o = getUrlVars().btag,
    s = decodeURIComponent(o),
    createCookie("btag", s, 7)),
    betSlipData = JSON.parse(localStorage.getItem("betSlipData")),
    betSlipData === null ? (betSlipData = [],
    localStorage.setItem("betSlipData", JSON.stringify(betSlipData))) : betSlipData = JSON.parse(localStorage.getItem("betSlipData")),
    u = [],
    betSlipData.length > 0) {
        for (let n = 0;
        //betslip data post token

        n < betSlipData.length; n++) {
            let t = betSlipData[n].kickOffTime;
            h = new Date(t);
            c = new Date;
            h.getTime() < c.getTime() && betSlipData[n].isLive.toString().toLowerCase() !== "true" && u.push(n);
            document.getElementById("highlightBet_" + betSlipData[n].selectionId) !== null && betSlipData[n].selectionId !== "" && highlightBets("highlightBet_" + betSlipData[n].selectionId)
        }
        u !== null && u.length > 0 && (updateBetslip(),
        localStorage.setItem("betSlipData", JSON.stringify(betSlipData)),
        t = document.getElementById("getBetsCountDisplay"),
        t != null && (t.innerHTML = betSlipData.length),
        getBetSlip(betSlipData),
        isShowPayoutMessage = !1)
    }
    betSlipData !== null && betSlipData.length > 0 ? r !== null && r.classList.add("SB-betSlip-active") : r !== null && r.classList.remove("SB-betSlip-active");
    t = document.getElementById("getBetsCountDisplay");
    t !== null && (t.innerHTML = betSlipData.length);
    getBetSlip(betSlipData);
    betslipCarouselOne();
    let f = readCookie("token");
    f !== null && (getUserBalance("initial"),
    getUserBetsCount());
    i = document.querySelectorAll(".footerItemsDisplayListWithLogin li");
    window.location.href.includes("MyBets") || window.location.href.includes("Cashout") || window.location.href.includes("SettledBets") || window.location.href.includes("Promotions") ? addActiveClass(i, window.location.pathname) : window.location.href.includes("Home") ? addActiveClass(i, window.location.pathname) : window.location.pathname === "/" && (removeActiveClass(i),
    addActiveClass(i, window.location.pathname));
    f === null && (l = document.querySelectorAll(".footerItemsDisplayListWithOutLogin li"),
    addActiveClass(l, window.location.pathname));
    n = document.querySelectorAll(".topHeaderAddActiveClass li");
    window.location.href !== window.location.origin + "/Home" || window.location.href.includes("Jackpot") || window.location.href.includes("Home/VirtualLeague") || window.location.href.includes("Jackpot") || window.location.href.includes("Home/PigaPena") ? window.location.href.includes("Jackpot") ? (removeActiveClass(n),
    addActiveClass(n, window.location.pathname)) : window.location.href.includes("Games") ? (removeActiveClass(n),
    addActiveClass(n, window.location.pathname)) : window.location.href.includes("Home/PigaPena") ? (removeActiveClass(n),
    document.querySelector(".bl-icon-pigaPina").parentNode.parentNode.classList.add("active")) : window.location.href.includes("/Home/Pick6") ? (removeActiveClass(n),
    document.querySelector(".bl-icon-casino").parentNode.parentNode.classList.add("active")) : window.location.href.includes("Home/VirtualLeague") ? (removeActiveClass(n),
    addActiveClass(n, window.location.pathname)) : window.location.href.includes("Promotions") ? (removeActiveClass(n),
    addActiveClass(n, window.location.pathname)) : window.location.href.includes("Home/Upcoming") ? (removeActiveClass(n),
    addActiveClass(n, window.location.pathname),
    siteMetaTags.PageMetaTags("Upcoming")) : window.location.href.includes("A-Z Sports") ? (removeActiveClass(n),
    addActiveClass(n, window.location.pathname)) : window.location.href.includes("Home/PickMoja") ? (removeActiveClass(n),
    e = document.querySelectorAll(".BLM-VLeagueIcon"),
    e.length > 1 && e[1].parentNode.parentNode.classList.add("active")) : window.location.pathname === "/" && (siteMetaTags.PageMetaTags("Default"),
    removeActiveClass(n),
    addActiveClass(n, window.location.pathname)) : (removeActiveClass(n),
    addActiveClass(n, window.location.pathname));
    hideFreeBets(freeBetDetails);
    updateUIOddsInBetSlip();
    a = readCookie("pageFrom");
    a === "betslip" && f !== null && betSlipData.length > 0 && (isBetBuilder || readCookie("userStakeValue") !== null && readCookie("userStakeValue") !== "" && (v = readCookie("userStakeValue"),
    document.getElementById("stakeValue") !== null && (document.getElementById("stakeValue").value = v)),
    setTimeout(()=>{
        document.body.classList.add("SB-rightMenu-opened"),
        createCookie("pageFrom", "", -1),
        numberValidationMobile()
    }
    , 100))
});
document.addEventListener("click", function(n) {
    var t, i;
    n = n || window.event;
    t = n.target.id;
    t != null && t != undefined && t != "headerUserBalanceDisplay" && t != "SB-btnUserBalance" ? (i = document.getElementById("balancePopup"),
    i != null && i.classList.contains("active") && i.classList.remove("active")) : t != "MyAccount"
}, !1);

//https://stackoverflow.com/questions/60653841/how-to-send-data-from-javascript-function-to-django-view

function msgprints() {

    datax = JSON.stringify(betSlipData);

    alert(datax);

}

//https://docs.djangoproject.com/en/1.8/ref/csrf/
function getCookie(name) {

    var cookieValue = null;
    if (document.cookie && document.cookie != '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = jQuery.trim(cookies[i]);
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) == (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

function msgprint() {

    datax = JSON.stringify(betSlipData);

    var res = parseFloat(getOriginalStakeValue).toFixed(2);
    var csrftoken = getCookie('csrftoken');
    window.location.href = "betplace";

    var http = new XMLHttpRequest();
    //The onreadystatechange function is called every time the readyState changes.
    //4: request finished and response is ready
    //basically the below function gets called every time your the response of you request request is returned from the server.
    http.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 302) {
            var json = JSON.parse(this.responseText);
            console.log(json.success);
            //following line would actually change the url of your window.  
            window.location.href = json.success;
        }
    }
    ;

    if (res < 50) {

        alert("Minimum stake is ksh 50");

    }
    else {

        fetch('betplace', {
            method: 'POST',
            redirect: 'follow',
            headers: {

                'Content-Type': 'application/x-www-form-urlencoded',
                //"X-CSRFToken": csrftoken

            },
            body: new URLSearchParams({

                'Answer': datax,
                'Stake': res,
                'Length': betSlipData.length,
                'Bonus': bonusAmountValue,
                'toke': csrftoken

            }),
        });

        clearBets();

    }

}
